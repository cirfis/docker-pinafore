let LazyWrapper,getData,getFuncName,lodash;_3f2‍.x([["default",()=>_3f2‍.o]]);_3f2‍.w("./_LazyWrapper.js",[["default",["LazyWrapper"],function(v){LazyWrapper=v}]]);_3f2‍.w("./_getData.js",[["default",["getData"],function(v){getData=v}]]);_3f2‍.w("./_getFuncName.js",[["default",["getFuncName"],function(v){getFuncName=v}]]);_3f2‍.w("./wrapperLodash.js",[["default",["lodash"],function(v){lodash=v}]]);




/**
 * Checks if `func` has a lazy counterpart.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
 *  else `false`.
 */
function isLaziable(func) {
  var funcName = getFuncName(func),
      other = lodash[funcName];

  if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
    return false;
  }
  if (func === other) {
    return true;
  }
  var data = getData(other);
  return !!data && func === data[0];
}

_3f2‍.d(isLaziable);
