let isArray,isKey,stringToPath,toString;_3f2‍.x([["default",()=>_3f2‍.o]]);_3f2‍.w("./isArray.js",[["default",["isArray"],function(v){isArray=v}]]);_3f2‍.w("./_isKey.js",[["default",["isKey"],function(v){isKey=v}]]);_3f2‍.w("./_stringToPath.js",[["default",["stringToPath"],function(v){stringToPath=v}]]);_3f2‍.w("./toString.js",[["default",["toString"],function(v){toString=v}]]);




/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value, object) {
  if (isArray(value)) {
    return value;
  }
  return isKey(value, object) ? [value] : stringToPath(toString(value));
}

_3f2‍.d(castPath);
