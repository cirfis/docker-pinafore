let baseIteratee,isArrayLike,keys;_3f2‍.x([["default",()=>_3f2‍.o]]);_3f2‍.w("./_baseIteratee.js",[["default",["baseIteratee"],function(v){baseIteratee=v}]]);_3f2‍.w("./isArrayLike.js",[["default",["isArrayLike"],function(v){isArrayLike=v}]]);_3f2‍.w("./keys.js",[["default",["keys"],function(v){keys=v}]]);



/**
 * Creates a `_.find` or `_.findLast` function.
 *
 * @private
 * @param {Function} findIndexFunc The function to find the collection index.
 * @returns {Function} Returns the new find function.
 */
function createFind(findIndexFunc) {
  return function(collection, predicate, fromIndex) {
    var iterable = Object(collection);
    if (!isArrayLike(collection)) {
      var iteratee = baseIteratee(predicate, 3);
      collection = keys(collection);
      predicate = function(key) { return iteratee(iterable[key], key, iterable); };
    }
    var index = findIndexFunc(collection, predicate, fromIndex);
    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
  };
}

_3f2‍.d(createFind);
