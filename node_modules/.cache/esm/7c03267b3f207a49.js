let baseRepeat,baseToString,castSlice,hasUnicode,stringSize,stringToArray;_3f2‍.x([["default",()=>_3f2‍.o]]);_3f2‍.w("./_baseRepeat.js",[["default",["baseRepeat"],function(v){baseRepeat=v}]]);_3f2‍.w("./_baseToString.js",[["default",["baseToString"],function(v){baseToString=v}]]);_3f2‍.w("./_castSlice.js",[["default",["castSlice"],function(v){castSlice=v}]]);_3f2‍.w("./_hasUnicode.js",[["default",["hasUnicode"],function(v){hasUnicode=v}]]);_3f2‍.w("./_stringSize.js",[["default",["stringSize"],function(v){stringSize=v}]]);_3f2‍.w("./_stringToArray.js",[["default",["stringToArray"],function(v){stringToArray=v}]]);






/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeCeil = Math.ceil;

/**
 * Creates the padding for `string` based on `length`. The `chars` string
 * is truncated if the number of characters exceeds `length`.
 *
 * @private
 * @param {number} length The padding length.
 * @param {string} [chars=' '] The string used as padding.
 * @returns {string} Returns the padding for `string`.
 */
function createPadding(length, chars) {
  chars = chars === undefined ? ' ' : baseToString(chars);

  var charsLength = chars.length;
  if (charsLength < 2) {
    return charsLength ? baseRepeat(chars, length) : chars;
  }
  var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
  return hasUnicode(chars)
    ? castSlice(stringToArray(result), 0, length).join('')
    : result.slice(0, length);
}

_3f2‍.d(createPadding);
