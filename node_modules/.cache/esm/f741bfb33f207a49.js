let getWrapDetails,insertWrapDetails,setToString,updateWrapDetails;_3f2‍.x([["default",()=>_3f2‍.o]]);_3f2‍.w("./_getWrapDetails.js",[["default",["getWrapDetails"],function(v){getWrapDetails=v}]]);_3f2‍.w("./_insertWrapDetails.js",[["default",["insertWrapDetails"],function(v){insertWrapDetails=v}]]);_3f2‍.w("./_setToString.js",[["default",["setToString"],function(v){setToString=v}]]);_3f2‍.w("./_updateWrapDetails.js",[["default",["updateWrapDetails"],function(v){updateWrapDetails=v}]]);




/**
 * Sets the `toString` method of `wrapper` to mimic the source of `reference`
 * with wrapper details in a comment at the top of the source body.
 *
 * @private
 * @param {Function} wrapper The function to modify.
 * @param {Function} reference The reference function.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @returns {Function} Returns `wrapper`.
 */
function setWrapToString(wrapper, reference, bitmask) {
  var source = (reference + '');
  return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
}

_3f2‍.d(setWrapToString);
