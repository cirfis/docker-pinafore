let constant,defineProperty,identity;_3f2‍.x([["default",()=>_3f2‍.o]]);_3f2‍.w("./constant.js",[["default",["constant"],function(v){constant=v}]]);_3f2‍.w("./_defineProperty.js",[["default",["defineProperty"],function(v){defineProperty=v}]]);_3f2‍.w("./identity.js",[["default",["identity"],function(v){identity=v}]]);



/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var baseSetToString = !defineProperty ? identity : function(func, string) {
  return defineProperty(func, 'toString', {
    'configurable': true,
    'enumerable': false,
    'value': constant(string),
    'writable': true
  });
};

_3f2‍.d(baseSetToString);
