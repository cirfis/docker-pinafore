let baseMatches,baseMatchesProperty,identity,isArray,property;_3f2‍.x([["default",()=>_3f2‍.o]]);_3f2‍.w("./_baseMatches.js",[["default",["baseMatches"],function(v){baseMatches=v}]]);_3f2‍.w("./_baseMatchesProperty.js",[["default",["baseMatchesProperty"],function(v){baseMatchesProperty=v}]]);_3f2‍.w("./identity.js",[["default",["identity"],function(v){identity=v}]]);_3f2‍.w("./isArray.js",[["default",["isArray"],function(v){isArray=v}]]);_3f2‍.w("./property.js",[["default",["property"],function(v){property=v}]]);





/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */
function baseIteratee(value) {
  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if (typeof value == 'function') {
    return value;
  }
  if (value == null) {
    return identity;
  }
  if (typeof value == 'object') {
    return isArray(value)
      ? baseMatchesProperty(value[0], value[1])
      : baseMatches(value);
  }
  return property(value);
}

_3f2‍.d(baseIteratee);
