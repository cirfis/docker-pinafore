let eq,isArrayLike,isIndex,isObject;_3f2‍.x([["default",()=>_3f2‍.o]]);_3f2‍.w("./eq.js",[["default",["eq"],function(v){eq=v}]]);_3f2‍.w("./isArrayLike.js",[["default",["isArrayLike"],function(v){isArrayLike=v}]]);_3f2‍.w("./_isIndex.js",[["default",["isIndex"],function(v){isIndex=v}]]);_3f2‍.w("./isObject.js",[["default",["isObject"],function(v){isObject=v}]]);




/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */
function isIterateeCall(value, index, object) {
  if (!isObject(object)) {
    return false;
  }
  var type = typeof index;
  if (type == 'number'
        ? (isArrayLike(object) && isIndex(index, object.length))
        : (type == 'string' && index in object)
      ) {
    return eq(object[index], value);
  }
  return false;
}

_3f2‍.d(isIterateeCall);
