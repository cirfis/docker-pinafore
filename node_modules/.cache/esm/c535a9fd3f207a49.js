let assignMergeValue,cloneBuffer,cloneTypedArray,copyArray,initCloneObject,isArguments,isArray,isArrayLikeObject,isBuffer,isFunction,isObject,isPlainObject,isTypedArray,safeGet,toPlainObject;_3f2‍.x([["default",()=>_3f2‍.o]]);_3f2‍.w("./_assignMergeValue.js",[["default",["assignMergeValue"],function(v){assignMergeValue=v}]]);_3f2‍.w("./_cloneBuffer.js",[["default",["cloneBuffer"],function(v){cloneBuffer=v}]]);_3f2‍.w("./_cloneTypedArray.js",[["default",["cloneTypedArray"],function(v){cloneTypedArray=v}]]);_3f2‍.w("./_copyArray.js",[["default",["copyArray"],function(v){copyArray=v}]]);_3f2‍.w("./_initCloneObject.js",[["default",["initCloneObject"],function(v){initCloneObject=v}]]);_3f2‍.w("./isArguments.js",[["default",["isArguments"],function(v){isArguments=v}]]);_3f2‍.w("./isArray.js",[["default",["isArray"],function(v){isArray=v}]]);_3f2‍.w("./isArrayLikeObject.js",[["default",["isArrayLikeObject"],function(v){isArrayLikeObject=v}]]);_3f2‍.w("./isBuffer.js",[["default",["isBuffer"],function(v){isBuffer=v}]]);_3f2‍.w("./isFunction.js",[["default",["isFunction"],function(v){isFunction=v}]]);_3f2‍.w("./isObject.js",[["default",["isObject"],function(v){isObject=v}]]);_3f2‍.w("./isPlainObject.js",[["default",["isPlainObject"],function(v){isPlainObject=v}]]);_3f2‍.w("./isTypedArray.js",[["default",["isTypedArray"],function(v){isTypedArray=v}]]);_3f2‍.w("./_safeGet.js",[["default",["safeGet"],function(v){safeGet=v}]]);_3f2‍.w("./toPlainObject.js",[["default",["toPlainObject"],function(v){toPlainObject=v}]]);















/**
 * A specialized version of `baseMerge` for arrays and objects which performs
 * deep merges and tracks traversed objects enabling objects with circular
 * references to be merged.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {string} key The key of the value to merge.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} mergeFunc The function to merge values.
 * @param {Function} [customizer] The function to customize assigned values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
  var objValue = safeGet(object, key),
      srcValue = safeGet(source, key),
      stacked = stack.get(srcValue);

  if (stacked) {
    assignMergeValue(object, key, stacked);
    return;
  }
  var newValue = customizer
    ? customizer(objValue, srcValue, (key + ''), object, source, stack)
    : undefined;

  var isCommon = newValue === undefined;

  if (isCommon) {
    var isArr = isArray(srcValue),
        isBuff = !isArr && isBuffer(srcValue),
        isTyped = !isArr && !isBuff && isTypedArray(srcValue);

    newValue = srcValue;
    if (isArr || isBuff || isTyped) {
      if (isArray(objValue)) {
        newValue = objValue;
      }
      else if (isArrayLikeObject(objValue)) {
        newValue = copyArray(objValue);
      }
      else if (isBuff) {
        isCommon = false;
        newValue = cloneBuffer(srcValue, true);
      }
      else if (isTyped) {
        isCommon = false;
        newValue = cloneTypedArray(srcValue, true);
      }
      else {
        newValue = [];
      }
    }
    else if (isPlainObject(srcValue) || isArguments(srcValue)) {
      newValue = objValue;
      if (isArguments(objValue)) {
        newValue = toPlainObject(objValue);
      }
      else if (!isObject(objValue) || isFunction(objValue)) {
        newValue = initCloneObject(srcValue);
      }
    }
    else {
      isCommon = false;
    }
  }
  if (isCommon) {
    // Recursively merge objects and arrays (susceptible to call stack limits).
    stack.set(srcValue, newValue);
    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
    stack['delete'](srcValue);
  }
  assignMergeValue(object, key, newValue);
}

_3f2‍.d(baseMergeDeep);
