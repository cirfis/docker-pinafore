let castPath,isArguments,isArray,isIndex,isLength,toKey;_3f2‍.x([["default",()=>_3f2‍.o]]);_3f2‍.w("./_castPath.js",[["default",["castPath"],function(v){castPath=v}]]);_3f2‍.w("./isArguments.js",[["default",["isArguments"],function(v){isArguments=v}]]);_3f2‍.w("./isArray.js",[["default",["isArray"],function(v){isArray=v}]]);_3f2‍.w("./_isIndex.js",[["default",["isIndex"],function(v){isIndex=v}]]);_3f2‍.w("./isLength.js",[["default",["isLength"],function(v){isLength=v}]]);_3f2‍.w("./_toKey.js",[["default",["toKey"],function(v){toKey=v}]]);






/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath(object, path, hasFunc) {
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      result = false;

  while (++index < length) {
    var key = toKey(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result || ++index != length) {
    return result;
  }
  length = object == null ? 0 : object.length;
  return !!length && isLength(length) && isIndex(key, length) &&
    (isArray(object) || isArguments(object));
}

_3f2‍.d(hasPath);
