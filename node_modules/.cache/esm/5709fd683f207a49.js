let castPath,last,parent,toKey;_3f2‍.x([["default",()=>_3f2‍.o]]);_3f2‍.w("./_castPath.js",[["default",["castPath"],function(v){castPath=v}]]);_3f2‍.w("./last.js",[["default",["last"],function(v){last=v}]]);_3f2‍.w("./_parent.js",[["default",["parent"],function(v){parent=v}]]);_3f2‍.w("./_toKey.js",[["default",["toKey"],function(v){toKey=v}]]);




/**
 * The base implementation of `_.unset`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The property path to unset.
 * @returns {boolean} Returns `true` if the property is deleted, else `false`.
 */
function baseUnset(object, path) {
  path = castPath(path, object);
  object = parent(object, path);
  return object == null || delete object[toKey(last(path))];
}

_3f2‍.d(baseUnset);
