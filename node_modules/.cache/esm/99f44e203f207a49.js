let baseIsMatch,getMatchData,matchesStrictComparable;_3f2‍.x([["default",()=>_3f2‍.o]]);_3f2‍.w("./_baseIsMatch.js",[["default",["baseIsMatch"],function(v){baseIsMatch=v}]]);_3f2‍.w("./_getMatchData.js",[["default",["getMatchData"],function(v){getMatchData=v}]]);_3f2‍.w("./_matchesStrictComparable.js",[["default",["matchesStrictComparable"],function(v){matchesStrictComparable=v}]]);



/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatches(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
  }
  return function(object) {
    return object === source || baseIsMatch(object, source, matchData);
  };
}

_3f2‍.d(baseMatches);
