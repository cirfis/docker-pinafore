let crypto,fs,promisify,path,rollup,terser,replace,fromPairs,themes,terserOptions;_5d6‍.x([["buildInlineScript",()=>buildInlineScript]]);_5d6‍.w("crypto",[["default",["crypto"],function(v){crypto=v}]]);_5d6‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_5d6‍.w("util",[["promisify",["promisify"],function(v){promisify=v}]]);_5d6‍.w("path",[["default",["path"],function(v){path=v}]]);_5d6‍.w("rollup",[["rollup",["rollup"],function(v){rollup=v}]]);_5d6‍.w("rollup-plugin-terser",[["terser",["terser"],function(v){terser=v}]]);_5d6‍.w("@rollup/plugin-replace",[["default",["replace"],function(v){replace=v}]]);_5d6‍.w("lodash-es/fromPairs",[["default",["fromPairs"],function(v){fromPairs=v}]]);_5d6‍.w("../src/routes/_static/themes",[["themes",["themes"],function(v){themes=v}]]);_5d6‍.w("./terserOptions",[["default",["terserOptions"],function(v){terserOptions=v}]]);










const writeFile = promisify(fs.writeFile)

const themeColors = fromPairs(themes.map(_ => ([_.name, _.color])))

       async function buildInlineScript () {
  const inlineScriptPath = path.join(__dirname, '../src/inline-script/inline-script.js')

  const bundle = await rollup({
    input: inlineScriptPath,
    plugins: [
      replace({
        'process.browser': true,
        'process.env.THEME_COLORS': JSON.stringify(themeColors)
      }),
      // TODO: can't disable terser at all, it causes the CSP checksum to stop working
      // because the HTML gets minified as some point so the checksums don't match.
      terser({ ...terserOptions, mangle: !process.env.DEBUG })
    ]
  })
  const { output } = await bundle.generate({
    format: 'iife',
    sourcemap: true
  })

  const { code, map } = output[0]

  const fullCode = `${code}//# sourceMappingURL=/inline-script.js.map`
  const checksum = crypto.createHash('sha256').update(fullCode, 'utf8').digest('base64')

  await writeFile(path.resolve(__dirname, '../src/inline-script/checksum.js'),
    `module.exports = ${JSON.stringify(checksum)}`, 'utf8')
  await writeFile(path.resolve(__dirname, '../static/inline-script.js.map'),
    map.toString(), 'utf8')

  return '<script>' + fullCode + '</script>'
}
