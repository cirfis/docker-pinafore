let mapCacheClear,mapCacheDelete,mapCacheGet,mapCacheHas,mapCacheSet;_3f2‍.x([["default",()=>_3f2‍.o]]);_3f2‍.w("./_mapCacheClear.js",[["default",["mapCacheClear"],function(v){mapCacheClear=v}]]);_3f2‍.w("./_mapCacheDelete.js",[["default",["mapCacheDelete"],function(v){mapCacheDelete=v}]]);_3f2‍.w("./_mapCacheGet.js",[["default",["mapCacheGet"],function(v){mapCacheGet=v}]]);_3f2‍.w("./_mapCacheHas.js",[["default",["mapCacheHas"],function(v){mapCacheHas=v}]]);_3f2‍.w("./_mapCacheSet.js",[["default",["mapCacheSet"],function(v){mapCacheSet=v}]]);





/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

_3f2‍.d(MapCache);
