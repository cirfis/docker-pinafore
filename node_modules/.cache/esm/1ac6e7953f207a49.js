let Stack,assignMergeValue,baseFor,baseMergeDeep,isObject,keysIn,safeGet;_3f2‍.x([["default",()=>_3f2‍.o]]);_3f2‍.w("./_Stack.js",[["default",["Stack"],function(v){Stack=v}]]);_3f2‍.w("./_assignMergeValue.js",[["default",["assignMergeValue"],function(v){assignMergeValue=v}]]);_3f2‍.w("./_baseFor.js",[["default",["baseFor"],function(v){baseFor=v}]]);_3f2‍.w("./_baseMergeDeep.js",[["default",["baseMergeDeep"],function(v){baseMergeDeep=v}]]);_3f2‍.w("./isObject.js",[["default",["isObject"],function(v){isObject=v}]]);_3f2‍.w("./keysIn.js",[["default",["keysIn"],function(v){keysIn=v}]]);_3f2‍.w("./_safeGet.js",[["default",["safeGet"],function(v){safeGet=v}]]);







/**
 * The base implementation of `_.merge` without support for multiple sources.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} [customizer] The function to customize merged values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMerge(object, source, srcIndex, customizer, stack) {
  if (object === source) {
    return;
  }
  baseFor(source, function(srcValue, key) {
    stack || (stack = new Stack);
    if (isObject(srcValue)) {
      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
    }
    else {
      var newValue = customizer
        ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
        : undefined;

      if (newValue === undefined) {
        newValue = srcValue;
      }
      assignMergeValue(object, key, newValue);
    }
  }, keysIn);
}

_3f2‍.d(baseMerge);
