let ListCache,stackClear,stackDelete,stackGet,stackHas,stackSet;_3f2‍.x([["default",()=>_3f2‍.o]]);_3f2‍.w("./_ListCache.js",[["default",["ListCache"],function(v){ListCache=v}]]);_3f2‍.w("./_stackClear.js",[["default",["stackClear"],function(v){stackClear=v}]]);_3f2‍.w("./_stackDelete.js",[["default",["stackDelete"],function(v){stackDelete=v}]]);_3f2‍.w("./_stackGet.js",[["default",["stackGet"],function(v){stackGet=v}]]);_3f2‍.w("./_stackHas.js",[["default",["stackHas"],function(v){stackHas=v}]]);_3f2‍.w("./_stackSet.js",[["default",["stackSet"],function(v){stackSet=v}]]);






/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

_3f2‍.d(Stack);
