let arrayMap,copyArray,isArray,isSymbol,stringToPath,toKey,toString;_3f2‍.x([["default",()=>_3f2‍.o]]);_3f2‍.w("./_arrayMap.js",[["default",["arrayMap"],function(v){arrayMap=v}]]);_3f2‍.w("./_copyArray.js",[["default",["copyArray"],function(v){copyArray=v}]]);_3f2‍.w("./isArray.js",[["default",["isArray"],function(v){isArray=v}]]);_3f2‍.w("./isSymbol.js",[["default",["isSymbol"],function(v){isSymbol=v}]]);_3f2‍.w("./_stringToPath.js",[["default",["stringToPath"],function(v){stringToPath=v}]]);_3f2‍.w("./_toKey.js",[["default",["toKey"],function(v){toKey=v}]]);_3f2‍.w("./toString.js",[["default",["toString"],function(v){toString=v}]]);







/**
 * Converts `value` to a property path array.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Util
 * @param {*} value The value to convert.
 * @returns {Array} Returns the new property path array.
 * @example
 *
 * _.toPath('a.b.c');
 * // => ['a', 'b', 'c']
 *
 * _.toPath('a[0].b.c');
 * // => ['a', '0', 'b', 'c']
 */
function toPath(value) {
  if (isArray(value)) {
    return arrayMap(value, toKey);
  }
  return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
}

_3f2‍.d(toPath);
