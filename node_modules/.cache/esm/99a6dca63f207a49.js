let arrayMap,baseIteratee,baseMap,baseSortBy,baseUnary,compareMultiple,identity;_3f2‍.x([["default",()=>_3f2‍.o]]);_3f2‍.w("./_arrayMap.js",[["default",["arrayMap"],function(v){arrayMap=v}]]);_3f2‍.w("./_baseIteratee.js",[["default",["baseIteratee"],function(v){baseIteratee=v}]]);_3f2‍.w("./_baseMap.js",[["default",["baseMap"],function(v){baseMap=v}]]);_3f2‍.w("./_baseSortBy.js",[["default",["baseSortBy"],function(v){baseSortBy=v}]]);_3f2‍.w("./_baseUnary.js",[["default",["baseUnary"],function(v){baseUnary=v}]]);_3f2‍.w("./_compareMultiple.js",[["default",["compareMultiple"],function(v){compareMultiple=v}]]);_3f2‍.w("./identity.js",[["default",["identity"],function(v){identity=v}]]);







/**
 * The base implementation of `_.orderBy` without param guards.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
 * @param {string[]} orders The sort orders of `iteratees`.
 * @returns {Array} Returns the new sorted array.
 */
function baseOrderBy(collection, iteratees, orders) {
  var index = -1;
  iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(baseIteratee));

  var result = baseMap(collection, function(value, key, collection) {
    var criteria = arrayMap(iteratees, function(iteratee) {
      return iteratee(value);
    });
    return { 'criteria': criteria, 'index': ++index, 'value': value };
  });

  return baseSortBy(result, function(object, other) {
    return compareMultiple(object, other, orders);
  });
}

_3f2‍.d(baseOrderBy);
