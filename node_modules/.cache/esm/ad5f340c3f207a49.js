let listCacheClear,listCacheDelete,listCacheGet,listCacheHas,listCacheSet;_3f2‍.x([["default",()=>_3f2‍.o]]);_3f2‍.w("./_listCacheClear.js",[["default",["listCacheClear"],function(v){listCacheClear=v}]]);_3f2‍.w("./_listCacheDelete.js",[["default",["listCacheDelete"],function(v){listCacheDelete=v}]]);_3f2‍.w("./_listCacheGet.js",[["default",["listCacheGet"],function(v){listCacheGet=v}]]);_3f2‍.w("./_listCacheHas.js",[["default",["listCacheHas"],function(v){listCacheHas=v}]]);_3f2‍.w("./_listCacheSet.js",[["default",["listCacheSet"],function(v){listCacheSet=v}]]);





/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

_3f2‍.d(ListCache);
