let Symbol,copyArray,getTag,isArrayLike,isString,iteratorToArray,mapToArray,setToArray,stringToArray,values;_3f2‍.x([["default",()=>_3f2‍.o]]);_3f2‍.w("./_Symbol.js",[["default",["Symbol"],function(v){Symbol=v}]]);_3f2‍.w("./_copyArray.js",[["default",["copyArray"],function(v){copyArray=v}]]);_3f2‍.w("./_getTag.js",[["default",["getTag"],function(v){getTag=v}]]);_3f2‍.w("./isArrayLike.js",[["default",["isArrayLike"],function(v){isArrayLike=v}]]);_3f2‍.w("./isString.js",[["default",["isString"],function(v){isString=v}]]);_3f2‍.w("./_iteratorToArray.js",[["default",["iteratorToArray"],function(v){iteratorToArray=v}]]);_3f2‍.w("./_mapToArray.js",[["default",["mapToArray"],function(v){mapToArray=v}]]);_3f2‍.w("./_setToArray.js",[["default",["setToArray"],function(v){setToArray=v}]]);_3f2‍.w("./_stringToArray.js",[["default",["stringToArray"],function(v){stringToArray=v}]]);_3f2‍.w("./values.js",[["default",["values"],function(v){values=v}]]);










/** `Object#toString` result references. */
var mapTag = '[object Map]',
    setTag = '[object Set]';

/** Built-in value references. */
var symIterator = Symbol ? Symbol.iterator : undefined;

/**
 * Converts `value` to an array.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {Array} Returns the converted array.
 * @example
 *
 * _.toArray({ 'a': 1, 'b': 2 });
 * // => [1, 2]
 *
 * _.toArray('abc');
 * // => ['a', 'b', 'c']
 *
 * _.toArray(1);
 * // => []
 *
 * _.toArray(null);
 * // => []
 */
function toArray(value) {
  if (!value) {
    return [];
  }
  if (isArrayLike(value)) {
    return isString(value) ? stringToArray(value) : copyArray(value);
  }
  if (symIterator && value[symIterator]) {
    return iteratorToArray(value[symIterator]());
  }
  var tag = getTag(value),
      func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

  return func(value);
}

_3f2‍.d(toArray);
