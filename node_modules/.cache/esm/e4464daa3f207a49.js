let arrayReduce,deburr,words;_3f2‍.x([["default",()=>_3f2‍.o]]);_3f2‍.w("./_arrayReduce.js",[["default",["arrayReduce"],function(v){arrayReduce=v}]]);_3f2‍.w("./deburr.js",[["default",["deburr"],function(v){deburr=v}]]);_3f2‍.w("./words.js",[["default",["words"],function(v){words=v}]]);



/** Used to compose unicode capture groups. */
var rsApos = "['\u2019]";

/** Used to match apostrophes. */
var reApos = RegExp(rsApos, 'g');

/**
 * Creates a function like `_.camelCase`.
 *
 * @private
 * @param {Function} callback The function to combine each word.
 * @returns {Function} Returns the new compounder function.
 */
function createCompounder(callback) {
  return function(string) {
    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
  };
}

_3f2‍.d(createCompounder);
