let apply,castPath,last,parent,toKey;_3f2‍.x([["default",()=>_3f2‍.o]]);_3f2‍.w("./_apply.js",[["default",["apply"],function(v){apply=v}]]);_3f2‍.w("./_castPath.js",[["default",["castPath"],function(v){castPath=v}]]);_3f2‍.w("./last.js",[["default",["last"],function(v){last=v}]]);_3f2‍.w("./_parent.js",[["default",["parent"],function(v){parent=v}]]);_3f2‍.w("./_toKey.js",[["default",["toKey"],function(v){toKey=v}]]);





/**
 * The base implementation of `_.invoke` without support for individual
 * method arguments.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the method to invoke.
 * @param {Array} args The arguments to invoke the method with.
 * @returns {*} Returns the result of the invoked method.
 */
function baseInvoke(object, path, args) {
  path = castPath(path, object);
  object = parent(object, path);
  var func = object == null ? object : object[toKey(last(path))];
  return func == null ? undefined : apply(func, object, args);
}

_3f2‍.d(baseInvoke);
