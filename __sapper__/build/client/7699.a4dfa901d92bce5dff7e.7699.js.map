{"version":3,"sources":["webpack://pinafore/./node_modules/lodash-es/throttle.js","webpack://pinafore/./src/routes/_components/Label.html","webpack://pinafore/./src/routes/_utils/getImageNativeDimensions.js","webpack://pinafore/./src/routes/_components/profile/AccountProfileHeader.html","webpack://pinafore/./src/routes/_components/profile/AccountProfileFollow.html","webpack://pinafore/./src/routes/_components/profile/AccountProfileNote.html","webpack://pinafore/./src/routes/_components/profile/AccountProfileMeta.html","webpack://pinafore/./src/routes/_components/profile/AccountProfileDetails.html","webpack://pinafore/./src/routes/_components/dialog/asyncDialogs/importShowAccountProfileOptionsDialog.js","webpack://pinafore/./src/routes/_components/profile/AccountProfileMovedBanner.html","webpack://pinafore/./src/routes/_components/profile/AccountProfileFilters.html","webpack://pinafore/./src/routes/_components/profile/AccountProfile.html","webpack://pinafore/./src/routes/_components/timeline/PinnedStatuses.html","webpack://pinafore/./src/routes/_actions/pinnedStatuses.js","webpack://pinafore/./src/routes/_components/profile/AccountProfilePage.html","webpack://pinafore/./src/routes/_actions/block.js","webpack://pinafore/./src/routes/_api/block.js","webpack://pinafore/./src/routes/_actions/follow.js","webpack://pinafore/./src/routes/_api/follow.js","webpack://pinafore/./src/routes/_api/pinnedStatuses.js"],"names":["func","wait","options","leading","trailing","TypeError","className","undefined","label","async","getImageNativeDimensions","url","img","document","createElement","src","decodeImage","width","naturalWidth","height","naturalHeight","account","this","get","avatar","avatar_static","avatarStatic","display_name","displayName","username","showMediaDialog","nativeDimensions","Promise","all","importShowMediaDialog","description","formatIntl","type","preview_url","meta","original","small","store","acct","avatarSize","onAvatarClick","externalLinkLabel","relationship","blocking","domain_blocking","muting","followed_by","emojis","$omitEmojiInDisplayNames","removeEmoji","bot","$isVeryTinyMobileSize","$isTinyMobileSize","accessibleName","window","__button","e","preventDefault","stopPropagation","accountId","following","followRequested","newFollowingValue","locked","set","overrideFollowing","refs","icon","animate","pressedLabel","href","pressable","pressed","onFollowButtonClick","event","shown","id","requested","verifyCredentials","massagedNote","note","$autoplayGifs","massageUserText","massagedFields","field","name","value","i","verified","length","fields","map","emojifyText","verified_at","numberFormat","Intl","NumberFormat","then","mod","default","onMoreOptionsClick","numStatusesDisplay","numFollowingDisplay","numFollowersDisplay","followingLabel","followersLabel","statuses_count","following_count","followers_count","numStatuses","format","numFollowing","numFollowers","$disableFollowerCounts","count","moved","hasMovedLabel","movedAccessibleName","movedDisplayName","movedEmojis","filter","tabs","scheduleIdleTask","addEmojiTooltips","accountProfile","$currentAccountProfile","profileForAccount","headerImage","header","endsWith","header_static","headerImageIsMissing","$underlineLinks","classname","accountName","currentInstance","accessToken","pinnedStatuses","database","every","Boolean","Error","statuses","updatePinnedStatusesForAccount","on","updatePinnedStatuses","status","index","$pinnedStatuses","$currentInstance","ariaTitle","$currentVerifyCredentials","timeline","$currentAccountRelationship","$isUserLoggedIn","setAccountBlocked","block","toastOnSuccess","instanceName","timeout","blockAccount","unblockAccount","toast","console","error","message","setAccountFollowed","follow","followAccount","unfollowAccount","getPinnedStatuses","limit","pinned"],"mappings":"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","file":"7699.a4dfa901d92bce5dff7e.7699.js","sourcesContent":["import debounce from './debounce.js';\nimport isObject from './isObject.js';\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a throttled function that only invokes `func` at most once per\n * every `wait` milliseconds. The throttled function comes with a `cancel`\n * method to cancel delayed `func` invocations and a `flush` method to\n * immediately invoke them. Provide `options` to indicate whether `func`\n * should be invoked on the leading and/or trailing edge of the `wait`\n * timeout. The `func` is invoked with the last arguments provided to the\n * throttled function. Subsequent calls to the throttled function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the throttled function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.throttle` and `_.debounce`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to throttle.\n * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=true]\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n * @example\n *\n * // Avoid excessively updating the position while scrolling.\n * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n *\n * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n * jQuery(element).on('click', throttled);\n *\n * // Cancel the trailing throttled invocation.\n * jQuery(window).on('popstate', throttled.cancel);\n */\nfunction throttle(func, wait, options) {\n  var leading = true,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  if (isObject(options)) {\n    leading = 'leading' in options ? !!options.leading : leading;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n  return debounce(func, wait, {\n    'leading': leading,\n    'maxWait': wait,\n    'trailing': trailing\n  });\n}\n\nexport default throttle;\n","<div class=\"generic-label {className || ''}\">\n  <span class=\"generic-label-span\">\n    {label}\n  </span>\n</div>\n<style>\n  .generic-label {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n  .generic-label-span {\n    text-transform: uppercase;\n    padding: 3px 7px 2px;\n    background: var(--nav-bg);\n    color: var(--nav-text-color);\n    font-size: 0.8em;\n    border-radius: 4px;\n  }\n</style>\n<script>\n  export default {\n    data: () => ({\n      className: undefined\n    })\n  }\n</script>\n","import { decodeImage } from './decodeImage'\n\nexport async function getImageNativeDimensions (url) {\n  const img = document.createElement('img')\n  img.src = url\n  await decodeImage(img)\n  return {\n    width: img.naturalWidth,\n    height: img.naturalHeight\n  }\n}\n","<h2 class=\"sr-only\">Name and following</h2>\n<div class=\"account-profile-avatar\">\n  <button class=\"account-profile-avatar-button\"\n          aria-label=\"Click to see avatar\"\n          on:click=\"onAvatarClick()\" >\n    <Avatar {account} size={avatarSize} />\n  </button>\n</div>\n<div class=\"account-profile-name\">\n  <ExternalLink\n    className=\"account-profile-name-link focus-fix\"\n    href={account.url}\n    showIcon=\"true\"\n    normalIconColor=\"true\"\n    ariaLabel={externalLinkLabel}>\n    <AccountDisplayName {account} />\n  </ExternalLink>\n</div>\n{#if label}\n  <Label {label} className=\"account-profile-label\" />\n{/if}\n<div class=\"account-profile-username\">\n  {'@' + account.acct}\n</div>\n<div class=\"account-profile-followed-by\">\n  {#if relationship && relationship.blocking}\n    <span class=\"account-profile-followed-by-span\">Blocked</span>\n  {/if}\n  {#if relationship && relationship.domain_blocking}\n    <span class=\"account-profile-followed-by-span\">Domain hidden</span>\n  {/if}\n  {#if relationship && relationship.muting}\n    <span class=\"account-profile-followed-by-span\">Muted</span>\n  {/if}\n  {#if relationship && relationship.followed_by}\n    <span class=\"account-profile-followed-by-span\">Follows you</span>\n  {/if}\n</div>\n<style>\n  .account-profile-followed-by {\n    grid-area: followed-by;\n    align-self: center;\n    text-transform: uppercase;\n    color: var(--deemphasized-text-color);\n    font-size: 0.8em;\n    white-space: nowrap;\n  }\n  .account-profile-followed-by-span {\n    background: rgba(30, 30, 30, 0.2);\n    border-radius: 4px;\n    padding: 3px 5px;\n    white-space: nowrap;\n  }\n  .account-profile-avatar {\n    grid-area: avatar;\n  }\n\n  .account-profile-username {\n    grid-area: username;\n    color: var(--deemphasized-text-color);\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    align-self: center;\n  }\n\n  .account-profile-name {\n    grid-area: name;\n    font-size: 1.5em;\n    align-self: center;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    min-width: 0;\n  }\n\n  .account-profile-avatar-button {\n    border: none;\n    background: none;\n    margin: 0;\n    padding: 0;\n    display: flex;\n  }\n\n  .account-profile-avatar-button:hover {\n    opacity: 0.9;\n  }\n\n  .account-profile-avatar-button:active {\n    opacity: 0.8;\n  }\n\n  :global(a.account-profile-name-link) {\n    color: var(--body-text-color);\n    text-decoration: none;\n  }\n\n  :global(a.account-profile-name-link:hover) {\n    color: var(--body-text-color);\n    text-decoration: underline;\n  }\n\n  :global(.account-profile-label) {\n    grid-area: label;\n    justify-content: left !important;\n  }\n\n  @media (max-width: 767px) {\n    .account-profile-name {\n      font-size: 1.3em;\n    }\n    .account-profile-username {\n      font-size: 1.1em;\n    }\n    .account-profile-name, .account-profile-username {\n      align-self: flex-start;\n    }\n  }\n</style>\n<script>\n  import Avatar from '../Avatar.html'\n  import ExternalLink from '../ExternalLink.html'\n  import AccountDisplayName from './AccountDisplayName.html'\n  import { removeEmoji } from '../../_utils/removeEmoji'\n  import { store } from '../../_store/store'\n  import Label from '../Label.html'\n  import { importShowMediaDialog } from '../dialog/asyncDialogs/importShowMediaDialog.js'\n  import { getImageNativeDimensions } from '../../_utils/getImageNativeDimensions'\n  import { formatIntl } from '../../_utils/formatIntl'\n\n  export default {\n    store: () => store,\n    computed: {\n      emojis: ({ account }) => (account.emojis || []),\n      displayName: ({ account }) => account.display_name || account.username,\n      accessibleName: ({ displayName, emojis, $omitEmojiInDisplayNames }) => {\n        return $omitEmojiInDisplayNames\n          ? removeEmoji(displayName, emojis) || displayName\n          : displayName\n      },\n      bot: ({ account }) => !!account.bot,\n      label: ({ bot }) => bot ? 'bot' : '',\n      avatarSize: ({ $isVeryTinyMobileSize, $isTinyMobileSize }) => (\n        $isVeryTinyMobileSize ? 'small' : $isTinyMobileSize ? 'medium' : 'big'\n      ),\n      externalLinkLabel: ({ accessibleName }) => (\n        formatIntl([[\"label\"],\" (opens in new window)\"], { label: accessibleName })\n      )\n    },\n    methods: {\n      async onAvatarClick () {\n        const { account } = this.get()\n        const { avatar, avatar_static: avatarStatic, display_name: displayName, username } = account\n        const [showMediaDialog, nativeDimensions] = await Promise.all([\n          importShowMediaDialog(),\n          getImageNativeDimensions(avatarStatic)\n        ])\n        // pretend this is a media attachment so it will work in the media dialog\n        const { width, height } = nativeDimensions\n        const mediaAttachments = [\n          {\n            description: formatIntl([\"Avatar for \",[\"account\"]], { account: displayName || username }),\n            type: 'image',\n            preview_url: avatarStatic,\n            url: avatar,\n            meta: {\n              original: {\n                width,\n                height\n              },\n              small: {\n                width: 100,\n                height: 100\n              }\n            }\n          }\n        ]\n        showMediaDialog(mediaAttachments, /* index */ 0)\n      }\n    },\n    components: {\n      Avatar,\n      ExternalLink,\n      AccountDisplayName,\n      Label\n    }\n  }\n</script>\n","<div class=\"account-profile-follow {shown ? 'shown' : ''}\">\n  <!--\n    This button has a few different states.\n     - If we're blocking, then it's a normal non-toggle button that unblocks.\n     - Otherwise it's a pseudo-toggle button that changes whether we're following the account or not.\n     - If a follow is requested, then the button is pressed but shows as \"follow requested\" with\n       a different icon.\n  -->\n  <IconButton\n    className=\"account-profile-follow-icon-button\"\n    {label}\n    {pressedLabel}\n    {href}\n    {pressable}\n    {pressed}\n    big={!$isVeryTinyMobileSize}\n    on:click=\"onFollowButtonClick(event)\"\n    ref:icon\n  />\n</div>\n<style>\n  .account-profile-follow {\n    grid-area: follow;\n    align-self: flex-start;\n    display: none;\n  }\n  .account-profile-follow.shown {\n    display: block;\n  }\n\n  @media (max-width: 240px) {\n    .account-profile-follow {\n      justify-self: flex-end;\n    }\n  }\n</style>\n<script>\n  import IconButton from '../IconButton.html'\n  import { FOLLOW_BUTTON_ANIMATION } from '../../_static/animations'\n  import { store } from '../../_store/store'\n  import { setAccountFollowed } from '../../_actions/follow'\n  import { setAccountBlocked } from '../../_actions/block'\n  import { formatIntl } from '../../_utils/formatIntl'\n\n  export default {\n    methods: {\n      oncreate () {\n        if (process.browser) {\n          window.__button = this\n        }\n      },\n      async onFollowButtonClick (e) {\n        e.preventDefault()\n        e.stopPropagation()\n        const {\n          account,\n          accountId,\n          following,\n          followRequested,\n          blocking\n        } = this.get()\n        if (blocking) { // unblock\n          await setAccountBlocked(accountId, false)\n        } else { // follow/unfollow\n          const newFollowingValue = !(following || followRequested)\n          if (!account.locked) { // be optimistic, show the user that it succeeded\n            this.set({ overrideFollowing: newFollowingValue })\n          }\n          if (newFollowingValue) {\n            this.refs.icon.animate(FOLLOW_BUTTON_ANIMATION)\n          }\n          await setAccountFollowed(accountId, newFollowingValue)\n        }\n      }\n    },\n    store: () => store,\n    data: () => ({\n      overrideFollowing: undefined\n    }),\n    computed: {\n      accountId: ({ account }) => account.id,\n      following: ({ relationship, overrideFollowing }) => {\n        if (typeof overrideFollowing === 'boolean') {\n          return overrideFollowing\n        }\n        return relationship && relationship.following\n      },\n      blocking: ({ relationship }) => relationship && relationship.blocking,\n      followRequested: ({ relationship }) => {\n        return relationship && relationship.requested\n      },\n      requested: ({ following, followRequested }) => !following && followRequested,\n      label: ({ blocking, requested }) => {\n        if (blocking) {\n          return \"Unblock\"\n        }\n        return formatIntl([\"Follow \",[\"requested\",\"select\",{\"true\":[\"(follow requested)\"],\"other\":[]}]], { requested })\n      },\n      pressedLabel: ({ requested }) => {\n        return formatIntl([\"Unfollow \",[\"requested\",\"select\",{\"true\":[\"(follow requested)\"],\"other\":[]}]], { requested })\n      },\n      href: ({ blocking, following, followRequested }) => {\n        if (blocking) {\n          return '#fa-unlock'\n        } else if (following) {\n          return '#fa-user-times'\n        } else if (followRequested) {\n          return '#fa-hourglass'\n        } else {\n          return '#fa-user-plus'\n        }\n      },\n      shown: ({ verifyCredentials, relationship }) => (\n        verifyCredentials && relationship && verifyCredentials.id !== relationship.id\n      ),\n      pressable: ({ blocking }) => !blocking,\n      pressed: ({ blocking, following, followRequested }) => (\n        !blocking && (following || followRequested)\n      )\n    },\n    components: {\n      IconButton\n    }\n  }\n</script>\n","<h2 class=\"sr-only\">Description</h2>\n<div class=\"account-profile-note\">\n  {@html massagedNote}\n</div>\n<style>\n  .account-profile-note {\n    grid-area: note;\n    padding: 10px 0;\n    font-size: 0.9em;\n    word-wrap: break-word;\n    overflow: hidden;\n    white-space: pre-wrap;\n  }\n\n  :global(.account-profile-note p) {\n    margin: 0 0 20px;\n  }\n\n  :global(.account-profile-note p:first-child) {\n    margin: 0 0 20px;\n  }\n\n  :global(.account-profile-note p:last-child) {\n    margin: 0;\n  }\n\n  :global(.underline-links .account-profile-note a) {\n    text-decoration: underline;\n  }\n\n  @media (max-width: 767px) {\n    .account-profile-note {\n      padding: 5px 0;\n    }\n  }\n</style>\n<script>\n  import { store } from '../../_store/store'\n  import { massageUserText } from '../../_utils/massageUserText'\n\n  export default {\n    store: () => store,\n    computed: {\n      note: ({ account }) => account.note,\n      emojis: ({ account }) => account.emojis || [],\n      massagedNote: ({ note, emojis, $autoplayGifs }) => massageUserText(note, emojis, $autoplayGifs)\n    }\n  }\n</script>\n","{#if massagedFields.length}\n  <h2 class=\"sr-only\">Fields</h2>\n  <div class=\"account-profile-meta\">\n    <div class=\"account-profile-meta-border\"></div>\n    {#each massagedFields as field, i}\n      <div\n        id=\"account-profile-meta-name-{i}\"\n        class=\"account-profile-meta-cell account-profile-meta-name\"\n        role=\"term\"\n      >\n        {field.name}\n      </div>\n      <div\n        class=\"account-profile-meta-cell account-profile-meta-value\"\n        role=\"definition\"\n        aria-labelledby=\"account-profile-meta-name-{i}\"\n      >\n        {@html field.value}\n      </div>\n      <div class=\"account-profile-meta-cell account-profile-meta-verified\">\n        {#if field.verified}\n          <SvgIcon className=\"account-profile-meta-verified-svg\" href=\"#fa-check\" />\n        {/if}\n      </div>\n    {/each}\n    <div class=\"account-profile-meta-border\"></div>\n  </div>\n{/if}\n<style>\n  .account-profile-meta {\n    grid-area: meta;\n    display: grid;\n    grid-template-columns: auto 1fr max-content;\n    grid-row-gap: 5px;\n    align-items: center;\n    padding: 10px 0;\n  }\n\n  .account-profile-meta-border {\n    height: 1px;\n    width: 100%;\n    grid-column: 1 / 4;\n    background: var(--main-border);\n    justify-self: center;\n  }\n\n  .account-profile-meta-cell {\n    word-wrap: break-word;\n    overflow: hidden;\n    white-space: pre-wrap;\n    text-overflow: ellipsis;\n    font-size: 1.1em;\n  }\n\n  :global(.account-profile-meta-verified-svg) {\n    width: 24px;\n    height: 24px;\n    fill: var(--svg-fill);\n  }\n\n  .account-profile-meta-name {\n    padding: 10px 20px 10px 0;\n    text-transform: uppercase;\n    color: var(--deemphasized-text-color);\n    position: relative;\n    max-width: 300px;\n  }\n\n  .account-profile-meta-name:after {\n    content: '';\n    position: absolute;\n    right: 0;\n    top: 15%;\n    height: 70%;\n    border-right: 1px solid var(--main-border);\n  }\n\n  .account-profile-meta-value {\n    padding: 10px 10px 10px 20px;\n  }\n\n  :global(.underline-links .account-profile-meta a) {\n    text-decoration: underline;\n  }\n\n  @media (max-width: 767px) {\n    .account-profile-meta {\n      padding: 5px 0;\n    }\n    .account-profile-meta-cell {\n      font-size: 1em;\n    }\n    .account-profile-meta-name {\n      padding: 5px 10px 5px 0;\n      max-width: 40vw;\n    }\n    .account-profile-meta-value {\n      padding: 5px 10px 5px 10px;\n    }\n  }\n</style>\n<script>\n  import SvgIcon from '../SvgIcon.html'\n  import { emojifyText } from '../../_utils/emojifyText'\n  import { store } from '../../_store/store'\n\n  export default {\n    store: () => store,\n    computed: {\n      emojis: ({ account }) => account.emojis || [],\n      fields: ({ account }) => account.fields || [],\n      massagedFields: ({ fields, emojis, $autoplayGifs }) => (fields.map(field => ({\n        name: field.name,\n        value: emojifyText(field.value, emojis, $autoplayGifs),\n        verified: !!field.verified_at\n      })))\n    },\n    components: {\n      SvgIcon\n    }\n  }\n</script>\n","<h2 class=\"sr-only\">Stats and more options</h2>\n<div class=\"account-profile-details\">\n  <div class=\"account-profile-details-item\">\n    <span class=\"account-profile-details-item-title\">\n      Toots\n    </span>\n    <span class=\"account-profile-details-item-datum\">\n      {numStatusesDisplay}\n    </span>\n  </div>\n  <a class=\"account-profile-details-item\"\n     href='/accounts/{account.id}/follows'\n     aria-label={followingLabel}\n     rel=\"prefetch\"\n  >\n    <span class=\"account-profile-details-item-title\">\n      Follows\n    </span>\n    <span class=\"account-profile-details-item-datum\">\n      {numFollowingDisplay}\n    </span>\n  </a>\n  <a class=\"account-profile-details-item\"\n     href='/accounts/{account.id}/followers'\n     aria-label={followersLabel}\n     rel=\"prefetch\"\n  >\n    <span class=\"account-profile-details-item-title\">\n      Followers\n    </span>\n    <span class=\"account-profile-details-item-datum\">\n      {numFollowersDisplay}\n    </span>\n  </a>\n  <!-- TODO: re-enable this when we support profile editing -->\n  {#if account && verifyCredentials && account.id !== verifyCredentials.id}\n    <div class=\"account-profile-more-options\">\n      <IconButton\n        label=\"More options\"\n        href=\"#fa-bars\"\n        muted=\"true\"\n        on:click=\"onMoreOptionsClick()\"\n      />\n    </div>\n  {/if}\n</div>\n<style>\n  .account-profile-details {\n    grid-area: details;\n    display: grid;\n    margin: 0 5px;\n    align-items: center;\n    grid-template-columns: 1fr 1fr 1fr min-content;\n  }\n\n  .account-profile-details-item {\n    display: flex;\n    flex-direction: row;\n    padding: 5px;\n    justify-content: center;\n    font-size: 1.1em;\n  }\n\n  .account-profile-details-item:hover {\n    text-decoration: none;\n    background: var(--button-bg-hover);\n    cursor: pointer;\n  }\n\n  .account-profile-details-item:active {\n    background: var(--button-bg-active);\n  }\n\n  .account-profile-details-item-title {\n    text-transform: uppercase;\n    color: var(--deemphasized-text-color);\n    margin-right: 5px;\n  }\n\n  .account-profile-details-item-datum {\n    color: var(--body-text-color);\n    margin-left: 5px;\n    font-weight: 600;\n  }\n\n  @media (max-width: 767px) {\n    .account-profile-details-item {\n      flex-direction: column;\n      margin-left: 5px;\n      margin-right: 5px;\n    }\n\n    .account-profile-details-item:last-child {\n      margin-right: 0;\n    }\n\n    .account-profile-details-item:first-child {\n      margin-left: 0;\n    }\n\n    .account-profile-details-item-title {\n      margin-right: 0;\n      text-align: center;\n    }\n    .account-profile-details-item-datum {\n      margin-left: 0;\n      text-align: center;\n    }\n    .account-profile-details-item {\n      font-size: 1em;\n    }\n  }\n\n  @media (max-width: 240px) {\n    .account-profile-details {\n      grid-template-columns: 1fr 1fr 1fr;\n    }\n    .account-profile-more-options {\n      justify-self: flex-end;\n      grid-column: 1 / 4;\n    }\n  }\n</style>\n<script>\n  import IconButton from '../IconButton.html'\n  import { importShowAccountProfileOptionsDialog } from '../dialog/asyncDialogs/importShowAccountProfileOptionsDialog.js'\n  import { LOCALE } from '../../_static/intl'\n  import { formatIntl } from '../../_utils/formatIntl'\n  import { thunk } from '../../_utils/thunk'\n\n  const numberFormat = thunk(() => new Intl.NumberFormat(LOCALE))\n\n  export default {\n    computed: {\n      numStatuses: ({ account }) => account.statuses_count || 0,\n      numFollowing: ({ account }) => account.following_count || 0,\n      numFollowers: ({ account }) => account.followers_count || 0,\n      numStatusesDisplay: ({ numStatuses }) => numberFormat().format(numStatuses),\n      numFollowingDisplay: ({ numFollowing }) => numberFormat().format(numFollowing),\n      numFollowersDisplay: ({ numFollowers, $disableFollowerCounts }) => {\n        if ($disableFollowerCounts && numFollowers >= 10) {\n          return '10+'\n        }\n        return numberFormat().format(numFollowers)\n      },\n      followersLabel: ({ numFollowers }) => (\n        formatIntl([\"Followed by \",[\"count\"]], { count: numFollowers })\n      ),\n      followingLabel: ({ numFollowing }) => (\n        formatIntl([\"Follows \",[\"count\"]], { count: numFollowing })\n      )\n    },\n    methods: {\n      async onMoreOptionsClick () {\n        const { account, relationship, verifyCredentials } = this.get()\n        const showAccountProfileOptionsDialog = await importShowAccountProfileOptionsDialog()\n        showAccountProfileOptionsDialog(account, relationship, verifyCredentials)\n      }\n    },\n    components: {\n      IconButton\n    }\n  }\n</script>\n","export const importShowAccountProfileOptionsDialog = () => import(\n  '../creators/showAccountProfileOptionsDialog'\n).then(mod => mod.default)\n","<div class=\"account-profile-moved-banner\">\n  <Avatar className=\"from-avatar\" size=\"extra-small\" {account} />\n  <div class=\"moved-label\">\n    <SvgIcon className=\"moved-svg\" href=\"#fa-suitcase\" />\n    {hasMovedLabel}\n  </div>\n  <a class=\"moved-avatar\" href=\"/accounts/{moved.id}\">\n    <Avatar account={moved} />\n  </a>\n  <a class=\"moved-to-name\" href=\"/accounts/{moved.id}\" title=\"@{moved.acct}\">{movedAccessibleName}</a>\n  <a class=\"moved-to-acct\" href=\"/accounts/{moved.id}\">@{moved.acct}</a>\n</div>\n<style>\n  .account-profile-moved-banner {\n    display: grid;\n    grid-template-areas: \"from-avatar label\"\n                         \"avatar name\"\n                         \"avatar acct\";\n    grid-template-columns: max-content 1fr;\n    margin: 10px 20px;\n    grid-row-gap: 10px;\n    grid-column-gap: 20px;\n  }\n  :global(.from-avatar) {\n    grid-area: from-avatar;\n    justify-self: flex-end;\n  }\n  :global(.moved-svg) {\n    width: 18px;\n    height: 18px;\n    fill: var(--deemphasized-text-color);\n    margin-right: 5px;\n  }\n  .moved-label, .moved-to-acct, .moved-to-name {\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n  .moved-avatar {\n    grid-area: avatar;\n  }\n  .moved-label {\n    grid-area: label;\n  }\n  .moved-to-acct {\n    grid-area: acct;\n    font-size: 1.2em;\n  }\n  .moved-to-name {\n    grid-area: name;\n    font-weight: 600;\n    font-size: 1.1em;\n    text-decoration: none;\n    color: var(--body-text-color);\n  }\n  .moved-to-name:hover {\n    text-decoration: underline;\n  }\n\n\n</style>\n<script>\n  import { removeEmoji } from '../../_utils/removeEmoji'\n  import Avatar from '../Avatar.html'\n  import SvgIcon from '../SvgIcon.html'\n  import { formatIntl } from '../../_utils/formatIntl'\n\n  export default {\n    computed: {\n      emojis: ({ account }) => (account.emojis || []),\n      displayName: ({ account }) => account.display_name || account.username,\n      accessibleName: ({ displayName, emojis, $omitEmojiInDisplayNames }) => {\n        return $omitEmojiInDisplayNames\n          ? removeEmoji(displayName, emojis) || displayName\n          : displayName\n      },\n      moved: ({ account }) => account.moved,\n      movedEmojis: ({ moved }) => (moved.emojis || []),\n      movedDisplayName: ({ moved }) => moved.display_name || moved.username,\n      movedAccessibleName: ({ movedDisplayName, movedEmojis, $omitEmojiInDisplayNames }) => {\n        return $omitEmojiInDisplayNames\n          ? removeEmoji(movedDisplayName, movedEmojis) || movedDisplayName\n          : movedDisplayName\n      },\n      hasMovedLabel: ({ accessibleName }) => (\n        formatIntl([[\"account\"],\" has moved:\"], { account: accessibleName })\n      )\n    },\n    components: {\n      Avatar,\n      SvgIcon\n    }\n  }\n</script>\n","<TabSet\n  label=\"Filters\"\n  currentTabName={filter}\n  {tabs}\n  className=\"account-profile-filters\"\n/>\n<style>\n  :global(.account-profile-filters) {\n    background: var(--account-profile-bg);\n  }\n</style>\n<script>\n  import TabSet from '../TabSet.html'\n\n  export default {\n    computed: {\n      tabs: ({ account }) => (\n        [\n          {\n            name: '',\n            label: 'Toots',\n            href: `/accounts/${account.id}`\n          },\n          {\n            name: 'with_replies',\n            label: 'Toots and replies',\n            href: `/accounts/${account.id}/with_replies`\n          },\n          {\n            name: 'media',\n            label: 'Media',\n            href: `/accounts/${account.id}/media`\n          }\n        ]\n      )\n    },\n    components: {\n      TabSet\n    }\n  }\n</script>\n","<h1 class=\"sr-only\">{profileForAccount}</h1>\n{#if moved}\n  <AccountProfileMovedBanner {account} />\n{/if}\n<div class={className}\n     style=\"background-image: url({headerImage});\"\n     ref:accountProfile>\n  <div class=\"account-profile-grid-wrapper\">\n    <div class=\"account-profile-grid\">\n      <AccountProfileHeader {account} {relationship} {verifyCredentials} />\n      <AccountProfileFollow {account} {relationship} {verifyCredentials} />\n      <AccountProfileNote {account} />\n      <AccountProfileMeta {account} />\n      <AccountProfileDetails {account} {relationship} {verifyCredentials} />\n    </div>\n  </div>\n  <AccountProfileFilters account={$currentAccountProfile} {filter} />\n</div>\n<style>\n  .account-profile {\n    position: relative;\n    background-size: cover;\n    background-position: center;\n    padding-top: 175px;\n  }\n\n  .account-profile.moved {\n    filter: grayscale(0.8);\n  }\n\n  .account-profile.header-image-is-missing {\n    padding-top: 0;\n    background-color: #ccc;\n  }\n\n  .account-profile-grid {\n    display: grid;\n    grid-template-areas: \"avatar     name        label     followed-by   follow\"\n                         \"avatar     username    username  username      follow\"\n                         \"avatar     note        note      note          follow\"\n                         \"meta       meta        meta      meta          meta\"\n                         \"details    details     details   details       details\";\n    grid-template-columns: min-content auto 1fr 1fr min-content;\n    grid-column-gap: 10px;\n    grid-row-gap: 5px;\n    padding: 20px;\n    justify-content: center;\n  }\n\n  @supports (-webkit-backdrop-filter: blur(1px) saturate(1%)) or (backdrop-filter: blur(1px) saturate(1%)) {\n    :global(.account-profile-grid-wrapper) {\n      -webkit-backdrop-filter: blur(7px) saturate(110%);\n      backdrop-filter: blur(7px) saturate(110%);\n      background-color: var(--account-profile-bg-backdrop-filter);\n    }\n  }\n\n  @supports not ((-webkit-backdrop-filter: blur(1px) saturate(1%)) or (backdrop-filter: blur(1px) saturate(1%))) {\n    :global(.account-profile-grid-wrapper) {\n      background-color: var(--account-profile-bg);\n    }\n  }\n\n  @media (max-width: 767px) {\n    .account-profile {\n      padding-top: 100px;\n    }\n\n    .account-profile-grid {\n      display: grid;\n      grid-template-areas: \"avatar     name          follow\"\n                           \"avatar     label         follow\"\n                           \"avatar     username      follow\"\n                           \"avatar     followed-by   follow\"\n                           \"note       note          note\"\n                           \"meta       meta          meta\"\n                           \"details    details       details\";\n      grid-template-columns: min-content minmax(auto, 1fr) min-content;\n      grid-template-rows: min-content min-content 1fr min-content;\n      padding: 10px;\n    }\n  }\n\n  @media (max-width: 320px) {\n    .account-profile {\n      padding-top: 50px;\n    }\n  }\n\n  @media (max-width: 240px) {\n    .account-profile {\n      padding-top: 0;\n    }\n    .account-profile-grid {\n      grid-template-areas: \"avatar      name\"\n                           \"avatar      label\"\n                           \"username    username\"\n                           \"followed-by followed-by\"\n                           \"follow      follow\"\n                           \"note        note\"\n                           \"meta        meta\"\n                           \"details     details\";\n      grid-template-columns: min-content 1fr;\n      grid-column-gap: 5px;\n      grid-row-gap: 0;\n    }\n  }\n</style>\n<script>\n  import AccountProfileHeader from './AccountProfileHeader.html'\n  import AccountProfileFollow from './AccountProfileFollow.html'\n  import AccountProfileNote from './AccountProfileNote.html'\n  import AccountProfileMeta from './AccountProfileMeta.html'\n  import AccountProfileDetails from './AccountProfileDetails.html'\n  import AccountProfileMovedBanner from './AccountProfileMovedBanner.html'\n  import AccountProfileFilters from './AccountProfileFilters.html'\n  import { store } from '../../_store/store'\n  import { classname } from '../../_utils/classname'\n  import { scheduleIdleTask } from '../../_utils/scheduleIdleTask'\n  import { addEmojiTooltips } from '../../_utils/addEmojiTooltips'\n  import { formatIntl } from '../../_utils/formatIntl'\n\n  export default {\n    oncreate () {\n      scheduleIdleTask(() => addEmojiTooltips(this.refs.accountProfile))\n    },\n    store: () => store,\n    computed: {\n      headerImageIsMissing: ({ account }) => account.header.endsWith('missing.png'),\n      headerImage: ({ $autoplayGifs, account }) => $autoplayGifs ? account.header : account.header_static,\n      accountName: ({ account }) => (account && (account.display_name || account.username)) || '',\n      moved: ({ account }) => account.moved,\n      className: ({ headerImageIsMissing, $underlineLinks, moved }) => (classname(\n        'account-profile',\n        moved && 'moved',\n        headerImageIsMissing && 'header-image-is-missing',\n        $underlineLinks && 'underline-links'\n      )),\n      profileForAccount: ({ accountName }) => (\n        formatIntl([\"Profile for \",[\"account\"]], { account: accountName })\n      )\n    },\n    components: {\n      AccountProfileHeader,\n      AccountProfileFollow,\n      AccountProfileNote,\n      AccountProfileMeta,\n      AccountProfileDetails,\n      AccountProfileMovedBanner,\n      AccountProfileFilters\n    }\n  }\n</script>\n","{#if pinnedStatuses.length }\n  <h1 class=\"sr-only\">Pinned toots</h1>\n  <div role=\"feed\" aria-label=\"Pinned toots\" class=\"pinned-statuses\">\n    {#each pinnedStatuses as status, index (status.id)}\n      <div class=\"pinned-status-wrapper\">\n        <!-- empty div used because we assume the parent of the <article> gets the focus outline -->\n        <Status {status}\n                timelineType=\"pinned\"\n                timelineValue={accountId}\n                {index}\n                length={pinnedStatuses.length}\n                enableShortcuts={true}\n        />\n      </div>\n    {/each}\n  </div>\n{/if}\n<style>\n  .pinned-status-wrapper:first-child {\n    margin: 2px 0; /* gives room for the focus outline */\n  }\n</style>\n<script>\n  import { store } from '../../_store/store'\n  import Status from '../status/Status.html'\n  import { updatePinnedStatusesForAccount } from '../../_actions/pinnedStatuses'\n  import { on } from '../../_utils/eventBus'\n\n  export default {\n    async oncreate () {\n      on('updatePinnedStatuses', this, () => this.updatePinnedStatuses())\n      await this.updatePinnedStatuses()\n    },\n    computed: {\n      pinnedStatuses: ({ $pinnedStatuses, $currentInstance, accountId }) => {\n        return ($pinnedStatuses[$currentInstance] && $pinnedStatuses[$currentInstance][accountId]) || []\n      }\n    },\n    store: () => store,\n    components: {\n      Status\n    },\n    methods: {\n      async updatePinnedStatuses () {\n        const { accountId } = this.get()\n        await updatePinnedStatusesForAccount(accountId)\n      }\n    }\n  }\n</script>\n","import { store } from '../_store/store'\nimport { cacheFirstUpdateAfter } from '../_utils/sync'\nimport { database } from '../_database/database'\nimport {\n  getPinnedStatuses\n} from '../_api/pinnedStatuses'\n\nexport async function updatePinnedStatusesForAccount (accountId) {\n  const { currentInstance, accessToken } = store.get()\n\n  await cacheFirstUpdateAfter(\n    () => getPinnedStatuses(currentInstance, accessToken, accountId),\n    async () => {\n      const pinnedStatuses = await database.getPinnedStatuses(currentInstance, accountId)\n      if (!pinnedStatuses || !pinnedStatuses.every(Boolean)) {\n        throw new Error('missing pinned statuses in idb')\n      }\n      return pinnedStatuses\n    },\n    statuses => database.insertPinnedStatuses(currentInstance, accountId, statuses),\n    statuses => {\n      const { pinnedStatuses } = store.get()\n      pinnedStatuses[currentInstance] = pinnedStatuses[currentInstance] || {}\n      pinnedStatuses[currentInstance][accountId] = statuses\n      store.set({ pinnedStatuses: pinnedStatuses })\n    }\n  )\n}\n","{#if $isUserLoggedIn}\n<TimelinePage {timeline} >\n  <DynamicPageBanner title=\"\" {ariaTitle} />\n  {#if $currentAccountProfile && $currentVerifyCredentials}\n  <AccountProfile account={$currentAccountProfile}\n                  relationship={$currentAccountRelationship}\n                  verifyCredentials={$currentVerifyCredentials}\n                  {filter}\n  />\n  {/if}\n  {#if !filter}\n    <PinnedStatuses {accountId} />\n  {/if}\n</TimelinePage>\n{:else}\n<HiddenFromSSR>\n  <FreeTextLayout>\n    <h1>Profile</h1>\n\n    <p>A user timeline will appear here when logged in.</p>\n  </FreeTextLayout>\n</HiddenFromSSR>\n{/if}\n<script>\n  import TimelinePage from '../TimelinePage.html'\n  import FreeTextLayout from '../FreeTextLayout.html'\n  import { store } from '../../_store/store.js'\n  import HiddenFromSSR from '../HiddenFromSSR'\n  import DynamicPageBanner from '../DynamicPageBanner.html'\n  import { updateProfileAndRelationship, clearProfileAndRelationship } from '../../_actions/accounts'\n  import AccountProfile from './AccountProfile.html'\n  import PinnedStatuses from '../timeline/PinnedStatuses.html'\n  import { formatIntl } from '../../_utils/formatIntl'\n\n  export default {\n    oncreate () {\n      const { accountId } = this.get()\n      clearProfileAndRelationship()\n      updateProfileAndRelationship(accountId)\n    },\n    store: () => store,\n    computed: {\n      profileName: ({ $currentAccountProfile }) => {\n        return ($currentAccountProfile && ('@' + $currentAccountProfile.acct)) || ''\n      },\n      shortProfileName: ({ $currentAccountProfile }) => {\n        return ($currentAccountProfile && ('@' + $currentAccountProfile.username)) || ''\n      },\n      accountName: ({ $currentAccountProfile }) => {\n        return ($currentAccountProfile && ($currentAccountProfile.display_name || $currentAccountProfile.username)) || ''\n      },\n      timeline: ({ accountId, filter }) => (\n        `account/${accountId}` + (filter ? `/${filter}` : '')\n      ),\n      ariaTitle: ({ accountName }) => (\n        formatIntl([\"Profile page for \",[\"account\"]], { account: accountName })\n      )\n    },\n    components: {\n      TimelinePage,\n      FreeTextLayout,\n      HiddenFromSSR,\n      DynamicPageBanner,\n      AccountProfile,\n      PinnedStatuses\n    }\n  }\n</script>\n","import { store } from '../_store/store'\nimport { blockAccount, unblockAccount } from '../_api/block'\nimport { toast } from '../_components/toast/toast'\nimport { updateLocalRelationship } from './accounts'\nimport { emit } from '../_utils/eventBus'\nimport { formatIntl } from '../_utils/formatIntl'\n\nexport async function setAccountBlocked (accountId, block, toastOnSuccess) {\n  const { currentInstance, accessToken } = store.get()\n  try {\n    let relationship\n    if (block) {\n      relationship = await blockAccount(currentInstance, accessToken, accountId)\n    } else {\n      relationship = await unblockAccount(currentInstance, accessToken, accountId)\n    }\n    await updateLocalRelationship(currentInstance, accountId, relationship)\n    if (toastOnSuccess) {\n      if (block) {\n        /* no await */ toast.say(\"Blocked account\")\n      } else {\n        /* no await */ toast.say(\"Unblocked account\")\n      }\n    }\n    emit('refreshAccountsList')\n  } catch (e) {\n    console.error(e)\n    /* no await */ toast.say(block\n      ? formatIntl([\"Unable to block account: \",[\"error\"]], { block: !!block, error: (e.message || '') })\n      : formatIntl([\"Unable to unblock account: \",[\"error\"]], { error: (e.message || '') })\n    )\n  }\n}\n","import { auth, basename } from './utils'\nimport { post, WRITE_TIMEOUT } from '../_utils/ajax'\n\nexport async function blockAccount (instanceName, accessToken, accountId) {\n  const url = `${basename(instanceName)}/api/v1/accounts/${accountId}/block`\n  return post(url, null, auth(accessToken), { timeout: WRITE_TIMEOUT })\n}\n\nexport async function unblockAccount (instanceName, accessToken, accountId) {\n  const url = `${basename(instanceName)}/api/v1/accounts/${accountId}/unblock`\n  return post(url, null, auth(accessToken), { timeout: WRITE_TIMEOUT })\n}\n","import { store } from '../_store/store'\nimport { followAccount, unfollowAccount } from '../_api/follow'\nimport { toast } from '../_components/toast/toast'\nimport { updateLocalRelationship } from './accounts'\nimport { formatIntl } from '../_utils/formatIntl'\n\nexport async function setAccountFollowed (accountId, follow, toastOnSuccess) {\n  const { currentInstance, accessToken } = store.get()\n  try {\n    let relationship\n    if (follow) {\n      relationship = await followAccount(currentInstance, accessToken, accountId)\n    } else {\n      relationship = await unfollowAccount(currentInstance, accessToken, accountId)\n    }\n    await updateLocalRelationship(currentInstance, accountId, relationship)\n    if (toastOnSuccess) {\n      /* no await */ toast.say(follow ? \"Followed account\" : \"Unfollowed account\")\n    }\n  } catch (e) {\n    console.error(e)\n    /* no await */ toast.say(follow\n      ? formatIntl([\"Unable to follow account: \",[\"error\"]], { error: (e.message || '') })\n      : formatIntl([\"Unable to unfollow account: \",[\"error\"]], { error: (e.message || '') })\n    )\n  }\n}\n","import { post, WRITE_TIMEOUT } from '../_utils/ajax'\nimport { auth, basename } from './utils'\n\nexport async function followAccount (instanceName, accessToken, accountId) {\n  const url = `${basename(instanceName)}/api/v1/accounts/${accountId}/follow`\n  return post(url, null, auth(accessToken), { timeout: WRITE_TIMEOUT })\n}\n\nexport async function unfollowAccount (instanceName, accessToken, accountId) {\n  const url = `${basename(instanceName)}/api/v1/accounts/${accountId}/unfollow`\n  return post(url, null, auth(accessToken), { timeout: WRITE_TIMEOUT })\n}\n","import { get, paramsString, DEFAULT_TIMEOUT } from '../_utils/ajax'\nimport { auth, basename } from './utils'\n\nexport async function getPinnedStatuses (instanceName, accessToken, accountId) {\n  let url = `${basename(instanceName)}/api/v1/accounts/${accountId}/statuses`\n  url += '?' + paramsString({\n    limit: 40,\n    pinned: true\n  })\n  return get(url, auth(accessToken), { timeout: DEFAULT_TIMEOUT })\n}\n"],"sourceRoot":""}