{"version":3,"sources":["webpack://pinafore/./src/routes/_pages/settings/instances/index.html","webpack://pinafore/./src/routes/settings/instances/index.html","webpack://pinafore/./src/routes/_actions/instances.js","webpack://pinafore/./src/routes/_utils/asyncModules/importVirtualListStore.js","webpack://pinafore/./src/routes/_api/instance.js","webpack://pinafore/./src/routes/_api/user.js"],"names":["e","instanceName","preventDefault","stopPropagation","instanceStates","numInstances","instance","name","label","current","switchLabel","index","onSwitchToThisInstance","event","store","$isUserLoggedIn","$loggedInInstancesAsList","map","formatIntl","length","pageComponent","params","changeTheme","newTheme","instanceThemes","currentInstance","enableGrayscale","switchToInstance","searchResults","queryInSearch","async","logOutOfInstance","message","composeData","customEmoji","instanceInfos","instanceLists","loggedInInstances","loggedInInstancesInOrder","verifyCredentials","splice","indexOf","newInstance","objectsToClear","obj","timelineInitialized","timelinePreinitialized","virtualListStore","clearRealmByPrefix","toast","database","updateVerifyCredentialsForInstance","accessToken","access_token","catch","error","startsWith","logOutOnUnauthorized","thisVerifyCredentials","setStoreVerifyCredentials","updateInstanceInfo","info","getInstanceInfo","url","timeout","getVerifyCredentials","getAccount","accountId"],"mappings":"8QA+Fa,CACP,uBAAwBA,EAAGC,GACzBD,EAAEE,iBACFF,EAAEG,mBACF,QAAiBF,K,69BA5FVG,e,aAAL,Y,8KAF8DC,c,2mCAEzDD,e,gBAAL,a,0HAAA,O,qCAF8DC,c,wNAKfC,SAASC,K,QAC7BD,SAASC,K,YACLD,SAASE,O,iGAUrBF,SAASG,QAAU,WAAa,c,mHALlCH,SAASI,Y,UACPJ,SAASG,Q,QACXH,SAASK,O,qGACNC,uBAAuBC,EAAO,EAAAP,SAASC,S,+qBAVZD,SAASC,M,6BAC7BD,SAASC,M,iCACLD,SAASE,O,+CAUrBF,SAASG,QAAU,WAAa,c,gDALlCH,SAASI,a,+BACPJ,SAASG,S,6BACXH,SAASK,O,sHAmFnBG,EAAA,E,q8BAnGVC,gBAAe,E,+9BAkFtB,UAmBuB,yBAAEC,I,OACjBA,EAAyBC,KAAI,EAAGV,OAAME,WAAWE,KAAU,CACzDA,QACAJ,OACAE,UACAD,OAAO,EAAAU,EAAA,GAAW,CAAC,CAAC,YAAY,IAAI,CAAC,UAAU,SAAS,CAAC,KAAO,CAAC,sBAAsB,MAAQ,MAAO,CAAEZ,SAAUC,EAAME,YACxHC,aAAa,EAAAQ,EAAA,GAAW,CAAC,aAAa,CAAC,aAAc,CAAEZ,SAAUC,Q,kFAGtD,yBAAES,I,OAA+BA,EAAyBG,O,6GClG9D,CACXC,cAAa,G,sIAhBmB,K,mBAEzBA,c,SAAgBC,Q,gRAAhBD,e,sBAAgBC,Q,waCStB,SAASC,EAAarB,EAAcsB,GACzC,MAAM,eAAEC,GAAmB,UAC3BA,EAAevB,GAAgBsB,EAC/B,QAAU,CAAEC,eAAgBA,IAC5B,WACA,MAAM,gBAAEC,GAAoB,UAC5B,GAAIxB,IAAiBwB,EAAiB,CACpC,MAAM,gBAAEC,GAAoB,WAC5B,QAAcH,EAAUG,IAIrB,SAASC,EAAkB1B,GAChC,MAAM,eAAEuB,GAAmB,UAC3B,QAAU,CACRC,gBAAiBxB,EACjB2B,cAAe,KACfC,cAAe,KAEjB,WACA,MAAM,gBAAEH,GAAoB,WAC5B,QAAcF,EAAevB,GAAeyB,GAGvCI,eAAeC,EAAkB9B,EAAc+B,GACpDA,EAAUA,IAAW,EAAAd,EAAA,GAAW,CAAC,iBAAiB,CAAC,aAAc,CAAEZ,SAAUL,IAC7E,MAAM,YACJgC,EAAW,gBACXR,EAAe,YACfS,EAAW,cACXC,EAAa,cACbC,EAAa,eACbZ,EAAc,kBACda,EAAiB,yBACjBC,EAAwB,kBACxBC,GACE,UACJD,EAAyBE,OAAOF,EAAyBG,QAAQxC,GAAe,GAChF,MAAMyC,EAAczC,IAAiBwB,EAAkBa,EAAyB,GAAKb,EAC/EkB,EAAiB,CACrBV,EACAC,EACAC,EACAC,EACAZ,EACAa,EACAE,GAEF,IAAK,MAAMK,KAAOD,SACTC,EAAI3C,GAEb,QAAU,CACRgC,cACAR,gBAAiBiB,EACjBR,cACAC,gBACAC,gBACAZ,iBACAa,oBACAC,2BACAT,cAAe,GACfD,cAAe,KACfiB,qBAAqB,EACrBC,wBAAwB,EACxBP,sBAEF,iCAAmCtC,GACnC,oCAAsCA,GACtC,WACA,MAAM,iBAAE8C,SChFkC,kEDiF1CA,EAAiBC,mBAAmBvB,EAAkB,KACtDwB,EAAA,MAAUjB,GACV,MAAM,gBAAEN,GAAoB,WAC5B,QAAcF,EAAekB,GAAchB,GAC5BwB,EAAA,2BAAkCjD,IACjD,QAAK,uBASA6B,eAAeqB,EAAoClD,GACxD,MAAM,kBAAEoC,GAAsB,UACxBe,EAAcf,EAAkBpC,GAAcoD,mBAC9C,QACJ,KAAM,OAAqBpD,EAAcmD,GAAaE,MAyBnD,SAA+BrD,GACpC,OAAO6B,UAKL,MAJIyB,EAAMvB,QAAQwB,WAAW,eACrBzB,EAAiB9B,GAAc,EAAAiB,EAAA,GAAW,CAAC,+CAA+C,CAAC,aAAc,CAAEZ,SAAUL,KAGvHsD,GA/BsDE,CAAqBxD,MACjF,IAAMiD,EAAA,+BAAsCjD,KAC5CsC,GAAqBW,EAAA,+BAAsCjD,EAAcsC,KACzEA,GAbJ,SAAoCtC,EAAcyD,GAChD,MAAM,kBAAEnB,GAAsB,UAC9BA,EAAkBtC,GAAgByD,EAClC,QAAU,CAAEnB,kBAAmBA,IAURoB,CAA0B1D,EAAcsC,KAS1DT,eAAe8B,EAAoB3D,SAClC,QACJ,KAAM,OAAgBA,KACtB,IAAMiD,EAAA,kBAAyBjD,KAC/B4D,GAAQX,EAAA,kBAAyBjD,EAAc4D,KAC/CA,IACE,MAAM,cAAE1B,GAAkB,UAC1BA,EAAclC,GAAgB4D,EAC9B,QAAU,CAAE1B,cAAeA,S,qEEpH1B,SAAS2B,EAAiB7D,GAC/B,MAAM8D,EAAM,IAAG,OAAS9D,qBACxB,OAAO,QAAI8D,EAAK,KAAM,CAAEC,QAAS,S,6ECF5B,SAASC,EAAsBhE,EAAcmD,GAClD,MAAMW,EAAM,IAAG,OAAS9D,wCACxB,OAAO,QAAI8D,GAAK,OAAKX,GAAc,CAAEY,QAAS,OAGzC,SAASE,EAAYjE,EAAcmD,EAAae,GACrD,MAAMJ,EAAM,IAAG,OAAS9D,sBAAiCkE,IACzD,OAAO,QAAIJ,GAAK,OAAKX,GAAc,CAAEY,QAAS","file":"8651.c6cc5a6cbc2b64195631.settings_instances.js","sourcesContent":["<SettingsLayout page='settings/instances' label=\"Instances\">\n  <h1>Instances</h1>\n\n  {#if $isUserLoggedIn}\n    <p>Instances you've logged in to:</p>\n    <RadioGroup id=\"instance-switch\" label=\"Switch to instance\" length={numInstances}>\n      <SettingsList label=\"Instances\">\n        {#each instanceStates as instance}\n        <SettingsListRow>\n          <SettingsListButton className=\"instance-switcher-instance-name\"\n                              href=\"/settings/instances/{instance.name}\"\n                              label={instance.name}\n                              ariaLabel={instance.label} />\n          <div class=\"instance-switcher-button-wrapper\">\n            <RadioGroupButton\n                    id=\"instance-switch\"\n                    className=\"instance-switcher-button\"\n                    label={instance.switchLabel}\n                    checked={instance.current}\n                    index={instance.index}\n                    on:click=\"onSwitchToThisInstance(event, instance.name)\">\n              <SvgIcon className=\"instance-switcher-button-svg\"\n                       href={instance.current ? '#fa-star' : '#fa-star-o'} />\n            </RadioGroupButton>\n          </div>\n        </SettingsListRow>\n        {/each}\n      </SettingsList>\n    </RadioGroup>\n    <p>\n      <a rel=\"prefetch\" href=\"/settings/instances/add\" id=\"log-in-link-1\">Add another instance</a>\n    </p>\n  {:else}\n    <p>You're not logged in to any instances.</p>\n    <p>\n      \n      <a rel=\"prefetch\" href=\"/settings/instances/add\" id=\"log-in-link-2\">Log in to an instance</a>\n      to start using Pinafore.\n    </p>\n  {/if}\n</SettingsLayout>\n<style>\n  :global(.instance-switcher-instance-name) {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  }\n  .instance-switcher-button-wrapper {\n    position: relative;\n    border: 1px solid var(--settings-list-item-border);\n    min-width: 44px;\n  }\n  :global(.instance-switcher-button) {\n    display: flex;\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    width: 100%;\n    border: none;\n    background: none;\n    align-items: center;\n    justify-content: center;\n    margin: 1px;\n  }\n  :global(.instance-switcher-button-svg) {\n    width: 24px;\n    height: 24px;\n    display: inline-block;\n    fill: var(--svg-fill);\n  }\n</style>\n<script>\n  import { store } from '../../../_store/store'\n  import { switchToInstance } from '../../../_actions/instances'\n  import SettingsLayout from '../../../_components/settings/SettingsLayout.html'\n  import SettingsList from '../../../_components/settings/SettingsList.html'\n  import SettingsListRow from '../../../_components/settings/SettingsListRow.html'\n  import SettingsListButton from '../../../_components/settings/SettingsListButton.html'\n  import SvgIcon from '../../../_components/SvgIcon.html'\n  import RadioGroup from '../../../_components/radio/RadioGroup.html'\n  import RadioGroupButton from '../../../_components/radio/RadioGroupButton.html'\n  import { formatIntl } from '../../../_utils/formatIntl'\n\n  export default {\n    components: {\n      SettingsLayout,\n      SettingsList,\n      SettingsListRow,\n      SettingsListButton,\n      SvgIcon,\n      RadioGroup,\n      RadioGroupButton\n    },\n    methods: {\n      onSwitchToThisInstance (e, instanceName) {\n        e.preventDefault()\n        e.stopPropagation()\n        switchToInstance(instanceName)\n      }\n    },\n    store: () => store,\n    computed: {\n      instanceStates: ({ $loggedInInstancesAsList }) => (\n        $loggedInInstancesAsList.map(({ name, current }, index) => ({\n          index,\n          name,\n          current,\n          label: formatIntl([[\"instance\"],\" \",[\"current\",\"select\",{\"true\":[\"(current instance)\"],\"other\":[]}]], { instance: name, current }),\n          switchLabel: formatIntl([\"Switch to \",[\"instance\"]], { instance: name })\n        }))\n      ),\n      numInstances: ({ $loggedInInstancesAsList }) => $loggedInInstancesAsList.length\n    }\n  }\n</script>\n","<Title name=\"Instances\" settingsPage={true} />\n\n  <LazyPage {pageComponent} {params} />\n\n<script>\n  import Title from '../../_components/Title.html'\n  import LazyPage from '../../_components/LazyPage.html'\n  import pageComponent from '../../_pages/settings/instances/index.html'\n\n  export default {\n    components: {\n\n      Title,\n      LazyPage\n    },\n    data: () => ({\n      pageComponent\n    })\n  }\n</script>\n","import { getVerifyCredentials } from '../_api/user'\nimport { store } from '../_store/store'\nimport { switchToTheme } from '../_utils/themeEngine'\nimport { toast } from '../_components/toast/toast'\nimport { goto } from '../../../__sapper__/client'\nimport { cacheFirstUpdateAfter } from '../_utils/sync'\nimport { getInstanceInfo } from '../_api/instance'\nimport { database } from '../_database/database'\nimport { importVirtualListStore } from '../_utils/asyncModules/importVirtualListStore.js'\nimport { formatIntl } from '../_utils/formatIntl'\n\nexport function changeTheme (instanceName, newTheme) {\n  const { instanceThemes } = store.get()\n  instanceThemes[instanceName] = newTheme\n  store.set({ instanceThemes: instanceThemes })\n  store.save()\n  const { currentInstance } = store.get()\n  if (instanceName === currentInstance) {\n    const { enableGrayscale } = store.get()\n    switchToTheme(newTheme, enableGrayscale)\n  }\n}\n\nexport function switchToInstance (instanceName) {\n  const { instanceThemes } = store.get()\n  store.set({\n    currentInstance: instanceName,\n    searchResults: null,\n    queryInSearch: ''\n  })\n  store.save()\n  const { enableGrayscale } = store.get()\n  switchToTheme(instanceThemes[instanceName], enableGrayscale)\n}\n\nexport async function logOutOfInstance (instanceName, message) {\n  message = message || formatIntl([\"Logged out of \",[\"instance\"]], { instance: instanceName })\n  const {\n    composeData,\n    currentInstance,\n    customEmoji,\n    instanceInfos,\n    instanceLists,\n    instanceThemes,\n    loggedInInstances,\n    loggedInInstancesInOrder,\n    verifyCredentials\n  } = store.get()\n  loggedInInstancesInOrder.splice(loggedInInstancesInOrder.indexOf(instanceName), 1)\n  const newInstance = instanceName === currentInstance ? loggedInInstancesInOrder[0] : currentInstance\n  const objectsToClear = [\n    composeData,\n    customEmoji,\n    instanceInfos,\n    instanceLists,\n    instanceThemes,\n    loggedInInstances,\n    verifyCredentials\n  ]\n  for (const obj of objectsToClear) {\n    delete obj[instanceName]\n  }\n  store.set({\n    composeData,\n    currentInstance: newInstance,\n    customEmoji,\n    instanceInfos,\n    instanceLists,\n    instanceThemes,\n    loggedInInstances,\n    loggedInInstancesInOrder,\n    queryInSearch: '',\n    searchResults: null,\n    timelineInitialized: false,\n    timelinePreinitialized: false,\n    verifyCredentials\n  })\n  store.clearTimelineDataForInstance(instanceName)\n  store.clearAutosuggestDataForInstance(instanceName)\n  store.save()\n  const { virtualListStore } = await importVirtualListStore()\n  virtualListStore.clearRealmByPrefix(currentInstance + '/') // TODO: this is a hacky way to clear the vlist cache\n  toast.say(message)\n  const { enableGrayscale } = store.get()\n  switchToTheme(instanceThemes[newInstance], enableGrayscale)\n  /* no await */ database.clearDatabaseForInstance(instanceName)\n  goto('/settings/instances')\n}\n\nfunction setStoreVerifyCredentials (instanceName, thisVerifyCredentials) {\n  const { verifyCredentials } = store.get()\n  verifyCredentials[instanceName] = thisVerifyCredentials\n  store.set({ verifyCredentials: verifyCredentials })\n}\n\nexport async function updateVerifyCredentialsForInstance (instanceName) {\n  const { loggedInInstances } = store.get()\n  const accessToken = loggedInInstances[instanceName].access_token\n  await cacheFirstUpdateAfter(\n    () => getVerifyCredentials(instanceName, accessToken).catch(logOutOnUnauthorized(instanceName)),\n    () => database.getInstanceVerifyCredentials(instanceName),\n    verifyCredentials => database.setInstanceVerifyCredentials(instanceName, verifyCredentials),\n    verifyCredentials => setStoreVerifyCredentials(instanceName, verifyCredentials)\n  )\n}\n\nexport async function updateVerifyCredentialsForCurrentInstance () {\n  const { currentInstance } = store.get()\n  await updateVerifyCredentialsForInstance(currentInstance)\n}\n\nexport async function updateInstanceInfo (instanceName) {\n  await cacheFirstUpdateAfter(\n    () => getInstanceInfo(instanceName),\n    () => database.getInstanceInfo(instanceName),\n    info => database.setInstanceInfo(instanceName, info),\n    info => {\n      const { instanceInfos } = store.get()\n      instanceInfos[instanceName] = info\n      store.set({ instanceInfos: instanceInfos })\n    }\n  )\n}\n\nexport function logOutOnUnauthorized (instanceName) {\n  return async error => {\n    if (error.message.startsWith('401:')) {\n      await logOutOfInstance(instanceName, formatIntl([\"The access token was revoked, logged out of \",[\"instance\"]], { instance: instanceName }))\n    }\n\n    throw error\n  }\n}\n","export const importVirtualListStore = () => import(\n  '../../_components/virtualList/virtualListStore.js'\n)\n","import { get, DEFAULT_TIMEOUT } from '../_utils/ajax'\nimport { basename } from './utils'\n\nexport function getInstanceInfo (instanceName) {\n  const url = `${basename(instanceName)}/api/v1/instance`\n  return get(url, null, { timeout: DEFAULT_TIMEOUT })\n}\n","import { get, DEFAULT_TIMEOUT } from '../_utils/ajax'\nimport { auth, basename } from './utils'\n\nexport function getVerifyCredentials (instanceName, accessToken) {\n  const url = `${basename(instanceName)}/api/v1/accounts/verify_credentials`\n  return get(url, auth(accessToken), { timeout: DEFAULT_TIMEOUT })\n}\n\nexport function getAccount (instanceName, accessToken, accountId) {\n  const url = `${basename(instanceName)}/api/v1/accounts/${accountId}`\n  return get(url, auth(accessToken), { timeout: DEFAULT_TIMEOUT })\n}\n"],"sourceRoot":""}