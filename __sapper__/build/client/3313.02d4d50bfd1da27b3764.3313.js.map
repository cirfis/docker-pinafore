{"version":3,"sources":["webpack://pinafore/./src/routes/_components/dialog/components/WordFilterDialog.html","webpack://pinafore/./src/routes/_components/dialog/creators/showWordFilterDialog.js","webpack://pinafore/./src/routes/_static/wordFilters.js"],"names":["show","close","event","this","computeConfirmationButtonDisabled","filter","syncDomToFilter","instanceName","get","confirmationButtonDisabled","refs","wordInput","value","replace","contextCheckboxes","querySelectorAll","some","checkbox","checked","set","phrase","expires_at","context","irreversible","whole_word","expiresAtValue","now","Date","_","sort","a","b","aAbsoluteTime","bAbsoluteTime","Math","abs","getTime","expireSelectWrapper","querySelector","includes","irreversibleCheckbox","wholeWordCheckbox","existingFilter","id","select","selectValue","parseInt","expires_in","input","map","onCreateDialog","syncFilterToDom","onContextChange","label","store","undefined","positiveText","expiryOptions","expiryDefaultValue","filterContexts","onWordOrPhraseChange","onExpiryChange","title","save","showReportDialog","WORD_FILTER_CONTEXT_HOME","WORD_FILTER_CONTEXT_NOTIFICATIONS","WORD_FILTER_CONTEXT_PUBLIC","WORD_FILTER_CONTEXT_THREAD","WORD_FILTER_CONTEXT_ACCOUNT","WORD_FILTER_CONTEXTS","WORD_FILTER_EXPIRY_OPTIONS","WORD_FILTER_EXPIRY_DEFAULT"],"mappings":"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","file":"3313.02d4d50bfd1da27b3764.3313.js","sourcesContent":["<GenericConfirmationDialog\n  {id}\n  {label}\n  {title}\n  {positiveText}\n  {confirmationButtonDisabled}\n  on:positive=\"save()\">\n  <div class=\"word-filter-dialog\">\n    <div class=\"word-filter-keyword\">\n      <label for=\"word-filter-word-or-phrase\" class=\"word-filter-keyword-label\">\n        <span>Word or phrase</span>\n        <!-- no need for aria-label=\"Required\", the input is already marked as required -->\n        <span aria-hidden=\"true\" class=\"required\">*</span>\n      </label>\n      <input type=\"text\"\n             required\n             autocomplete=\"off\"\n             autocapitalize=\"off\"\n             on:input=\"onWordOrPhraseChange(event)\"\n             ref:wordInput\n             id=\"word-filter-word-or-phrase\"\n      >\n    </div>\n    <div class=\"word-filter-expire-after\" ref:expireSelectWrapper>\n      <span class=\"word-filter-label-like word-filter-expire-label\">Expire after</span>\n      <Select className=\"word-filter-expiry-select\"\n              options={expiryOptions}\n              defaultValue={expiryDefaultValue}\n              on:change=\"onExpiryChange(event)\"\n              label=\"Expire after\"\n      />\n    </div>\n    <div class=\"word-filter-where-to-filter\">\n      <span class=\"word-filter-label-like\" id=\"word-filter-where-to-filter-label\">\n        <span>Where to filter</span>\n        <span aria-label=\"Required\" class=\"required\">*</span>\n      </span>\n      <ul class=\"word-filter-radio-list\" aria-describedby=\"word-filter-where-to-filter-label\" ref:contextCheckboxes>\n        {#each filterContexts as context}\n        <li>\n          <input type=\"checkbox\"\n                 name=\"where-to-filter\"\n                 value={context.value}\n                 on:change=\"onContextChange(event)\"\n                 id=\"where-to-filter-{context.value}\">\n          <label for=\"where-to-filter-{context.value}\">{context.label}</label>\n        </li>\n        {/each}\n      </ul>\n    </div>\n    <div class=\"word-filter-irreversible\">\n      <input type=\"checkbox\"\n             name=\"irreversible\"\n             ref:irreversibleCheckbox\n             id=\"word-filter-irreversible\">\n      <label for=\"word-filter-irreversible\">Irreversible</label>\n    </div>\n    <div class=\"word-filter-whole\">\n      <input type=\"checkbox\"\n             name=\"irreversible\"\n             ref:wholeWordCheckbox\n             id=\"word-filter-whole\">\n      <label for=\"word-filter-whole\">Whole word</label>\n    </div>\n  </div>\n</GenericConfirmationDialog>\n<style>\n.word-filter-dialog {\n  padding: 20px 40px;\n  overflow-y: auto;\n  display: grid;\n  grid-template-areas: \"keyword      expire\"\n                       \"context      context\"\n                       \"irreversible whole\";\n  grid-row-gap: 20px;\n  grid-column-gap: 10px;\n}\n.word-filter-label-like {\n  font-size: 1.3em;\n}\n.word-filter-radio-list {\n  list-style: none;\n  margin-top: 5px;\n}\n.word-filter-keyword {\n  grid-area: keyword;\n}\n.word-filter-expire-after {\n  grid-area: expire;\n}\n.word-filter-where-to-filter {\n  grid-area: context;\n}\n.word-filter-irreversible {\n  grid-area: irreversible;\n}\n.word-filter-whole {\n  grid-area: whole;\n}\n.word-filter-keyword-label, .word-filter-expire-label {\n  margin-right: 10px;\n}\n.required {\n  color: var(--warn-color);\n}\n@media (max-width: 479px) {\n  .word-filter-dialog {\n    grid-template-areas: \"keyword\"\n                         \"expire\"\n                         \"context\"\n                         \"irreversible\"\n                         \"whole\";\n    grid-column-gap: 5px;\n    grid-row-gap: 10px;\n  }\n}\n@media (max-width: 320px) {\n  .word-filter-dialog {\n    grid-row-gap: 5px;\n  }\n}\n</style>\n<script>\n  import GenericConfirmationDialog from './GenericConfirmationDialog.html'\n  import Select from '../../Select.html'\n  import { show } from '../helpers/showDialog'\n  import { close } from '../helpers/closeDialog'\n  import { oncreate as onCreateDialog } from '../helpers/onCreateDialog'\n  import { store } from '../../../_store/store'\n  import {\n    WORD_FILTER_CONTEXT_ACCOUNT,\n    WORD_FILTER_CONTEXT_HOME,\n    WORD_FILTER_CONTEXT_NOTIFICATIONS,\n    WORD_FILTER_CONTEXT_PUBLIC,\n    WORD_FILTER_CONTEXT_THREAD,\n    WORD_FILTER_CONTEXTS,\n    WORD_FILTER_EXPIRY_DEFAULT,\n    WORD_FILTER_EXPIRY_OPTIONS\n  } from '../../../_static/wordFilters'\n  import { createOrUpdateFilter } from '../../../_actions/filters'\n\n  export default {\n    async oncreate () {\n      onCreateDialog.call(this)\n      this.syncFilterToDom(this.get().filter)\n      this.computeConfirmationButtonDisabled()\n    },\n    store: () => store,\n    data: () => ({\n      filter: undefined,\n      instanceName: undefined,\n      positiveText: \"Save\",\n      expiryOptions: WORD_FILTER_EXPIRY_OPTIONS,\n      expiryDefaultValue: WORD_FILTER_EXPIRY_DEFAULT,\n      filterContexts: [\n        {\n          label: \"Home and lists\",\n          value: WORD_FILTER_CONTEXT_HOME\n        },\n        {\n          label: \"Notifications\",\n          value: WORD_FILTER_CONTEXT_NOTIFICATIONS\n        },\n        {\n          label: \"Public timelines\",\n          value: WORD_FILTER_CONTEXT_PUBLIC\n        },\n        {\n          label: \"Conversations\",\n          value: WORD_FILTER_CONTEXT_THREAD\n        },\n        {\n          label: \"Profiles\",\n          value: WORD_FILTER_CONTEXT_ACCOUNT\n        }\n      ],\n      confirmationButtonDisabled: false\n    }),\n    methods: {\n      show,\n      close,\n      onWordOrPhraseChange (event) {\n        this.computeConfirmationButtonDisabled()\n      },\n      onExpiryChange (event) {\n\n      },\n      onContextChange (event) {\n        this.computeConfirmationButtonDisabled()\n      },\n      async save () {\n        const filter = this.syncDomToFilter()\n        const { instanceName } = this.get()\n        await createOrUpdateFilter(instanceName, filter)\n      },\n      computeConfirmationButtonDisabled () {\n        const confirmationButtonDisabled = !(this.refs.wordInput.value.replace(/\\s+/g, '') &&\n          [...this.refs.contextCheckboxes.querySelectorAll('input')].some(checkbox => checkbox.checked))\n        this.set({ confirmationButtonDisabled })\n      },\n      syncFilterToDom (filter) {\n        if (!filter) {\n          filter = {\n            phrase: '',\n            expires_at: WORD_FILTER_EXPIRY_DEFAULT,\n            context: [...WORD_FILTER_CONTEXTS],\n            irreversible: false,\n            whole_word: true\n          }\n        }\n\n        this.refs.wordInput.value = filter.phrase\n\n        let expiresAtValue = 0\n        if (filter.expires_at) {\n          const now = Date.now()\n          expiresAtValue = WORD_FILTER_EXPIRY_OPTIONS.filter(_ => _.value)\n            .sort((a, b) => {\n              // expires_at is an absolute timestamp, so sort by whichever one is closest given the current datetime\n              const aAbsoluteTime = now + (a.value * 1000)\n              const bAbsoluteTime = now + (b.value * 1000)\n              const aDelta = Math.abs(new Date(filter.expires_at).getTime() - aAbsoluteTime)\n              const bDelta = Math.abs(new Date(filter.expires_at).getTime() - bAbsoluteTime)\n              return aDelta < bDelta ? -1 : 1\n            })[0].value\n        }\n\n        this.refs.expireSelectWrapper.querySelector('select').value = expiresAtValue\n        for (const checkbox of [...this.refs.contextCheckboxes.querySelectorAll('input')]) {\n          checkbox.checked = filter.context.includes(checkbox.value)\n        }\n        this.refs.irreversibleCheckbox.checked = !!filter.irreversible\n        this.refs.wholeWordCheckbox.checked = !!filter.whole_word\n      },\n      syncDomToFilter () {\n        const existingFilter = this.get().filter\n        const filter = {\n          id: existingFilter && existingFilter.id\n        }\n        filter.phrase = this.refs.wordInput.value\n        const select = this.refs.expireSelectWrapper.querySelector('select')\n        const selectValue = parseInt(select.value, 10)\n        // When creating a new filter or updating a filter, `expires_in` is the number of seconds from now\n        // that the filter expires. When reading, it's `expires_at` which is a string ISO timestamp.\n        // Also, if you added a timeout for a filter, you can't change it to Never for some reason.\n        filter.expires_in = selectValue || null\n        filter.context = [...this.refs.contextCheckboxes.querySelectorAll('input')]\n          .filter(input => input.checked)\n          .map(input => input.value)\n        filter.irreversible = this.refs.irreversibleCheckbox.checked\n        filter.whole_word = this.refs.wholeWordCheckbox.checked\n\n        return filter\n      }\n    },\n    components: {\n      GenericConfirmationDialog,\n      Select\n    }\n  }\n</script>\n","import WordFilterDialog from '../components/WordFilterDialog.html'\nimport { showDialog } from './showDialog'\n\nexport default function showReportDialog ({ filter, instanceName }) {\n  const label = filter ? \"Edit filter\" : \"Add filter\"\n  return showDialog(WordFilterDialog, {\n    label,\n    title: label,\n    filter,\n    instanceName\n  })\n}\n","export const WORD_FILTER_CONTEXT_HOME = 'home'\nexport const WORD_FILTER_CONTEXT_NOTIFICATIONS = 'notifications'\nexport const WORD_FILTER_CONTEXT_PUBLIC = 'public'\nexport const WORD_FILTER_CONTEXT_THREAD = 'thread'\nexport const WORD_FILTER_CONTEXT_ACCOUNT = 'account'\n\nexport const WORD_FILTER_CONTEXTS = [\n  WORD_FILTER_CONTEXT_HOME,\n  WORD_FILTER_CONTEXT_NOTIFICATIONS,\n  WORD_FILTER_CONTEXT_PUBLIC,\n  WORD_FILTER_CONTEXT_THREAD,\n  WORD_FILTER_CONTEXT_ACCOUNT\n]\n\n// Someday we can maybe replace this with Intl.DurationFormat\n// https://github.com/tc39/proposal-intl-duration-format\nexport const WORD_FILTER_EXPIRY_OPTIONS = [\n  {\n    value: 0,\n    label: \"Never\"\n  },\n  {\n    value: 1800,\n    label: \"30 minutes\"\n  },\n  {\n    value: 3600,\n    label: \"1 hour\"\n  },\n  {\n    value: 21600,\n    label: \"6 hours\"\n  },\n  {\n    value: 43200,\n    label: \"12 hours\"\n  },\n  {\n    value: 86400,\n    label: \"1 day\"\n  },\n  {\n    value: 604800,\n    label: \"7 days\"\n  }\n]\n\nexport const WORD_FILTER_EXPIRY_DEFAULT = 0\n"],"sourceRoot":""}