{"version":3,"sources":["webpack://pinafore/./src/routes/_components/shortcut/Shortcut.html","webpack://pinafore/./src/routes/_utils/shortcuts.js"],"names":["event","stopPropagation","preventDefault","this","fire","key","timeStamp","scope","get","scopeKeyMaps","currentScopeKey","scopeStack","prefixMap","prefixMapScope","KeyMap","pushShortcutScope","scopeKey","push","popShortcutScope","pop","addToShortcutScope","keys","component","window","addEventListener","onKeyDown","keyMap","split","forEach","seq","seqArray","prefixLen","length","currentMap","i","mapKeys","removeFromShortcutScope","lastKey","unmapKeys","Object","removeEventListener","FALLBACK_KEY","addShortcutFallback","removeShortcutFallback","onKeyDownInShortcutScope","handled","handleEvent","value","toLowerCase","prototype","isPrototypeOf","disableHotkeys","target","altKey","metaKey","ctrlKey","shiftKey","isContentEditable","includes","tagName","getAttribute","acceptShortcutEvent"],"mappings":"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","file":"7500.0ea822c5bce47faf5a3b.7500.js","sourcesContent":["<script>\n  import {\n    addToShortcutScope,\n    removeFromShortcutScope\n} from '../../_utils/shortcuts'\n  export default {\n    data: () => ({ scope: 'global', key: null }),\n    oncreate () {\n      const { scope, key } = this.get()\n      addToShortcutScope(scope, key, this)\n    },\n    ondestroy () {\n      const { scope, key } = this.get()\n      removeFromShortcutScope(scope, key, this)\n    },\n    methods: {\n      onKeyDown (event) {\n        event.stopPropagation()\n        event.preventDefault()\n        this.fire('pressed', {\n          key: event.key,\n          timeStamp: event.timeStamp\n        })\n      }\n    }\n  }\n</script>\n","import { store } from '../_store/store'\n\n// A map of scopeKey to KeyMap\nlet scopeKeyMaps\n\n// Current scope, starting with 'global'\nlet currentScopeKey\n\n// Previous current scopes\nlet scopeStack\n\n// Currently active prefix map\nlet prefixMap\n\n// Scope in which prefixMap is valid\nlet prefixMapScope\n\n// A map of key to components or other KeyMaps\nfunction KeyMap () {}\n\nexport function initShortcuts () {\n  currentScopeKey = 'global'\n  scopeStack = []\n  scopeKeyMaps = null\n  prefixMap = null\n  prefixMapScope = null\n}\ninitShortcuts()\n\n// Sets scopeKey as current scope.\nexport function pushShortcutScope (scopeKey) {\n  scopeStack.push(currentScopeKey)\n  currentScopeKey = scopeKey\n}\n\n// Go back to previous current scope.\nexport function popShortcutScope (scopeKey) {\n  if (scopeKey !== currentScopeKey) {\n    return\n  }\n  currentScopeKey = scopeStack.pop()\n}\n\n// Call component.onKeyDown(event) when a key in keys is pressed\n// in the given scope.\nexport function addToShortcutScope (scopeKey, keys, component) {\n  if (scopeKeyMaps == null) {\n    window.addEventListener('keydown', onKeyDown)\n    scopeKeyMaps = {}\n  }\n  let keyMap = scopeKeyMaps[scopeKey]\n  if (!keyMap) {\n    keyMap = new KeyMap()\n    scopeKeyMaps[scopeKey] = keyMap\n  }\n  mapKeys(keyMap, keys, component)\n}\n\nexport function removeFromShortcutScope (scopeKey, keys, component) {\n  const keyMap = scopeKeyMaps[scopeKey]\n  if (!keyMap) {\n    return\n  }\n  unmapKeys(keyMap, keys, component)\n  if (Object.keys(keyMap).length === 0) {\n    delete scopeKeyMaps[scopeKey]\n  }\n  if (Object.keys(scopeKeyMaps).length === 0) {\n    scopeKeyMaps = null\n    window.removeEventListener('keydown', onKeyDown)\n  }\n}\n\nconst FALLBACK_KEY = '__fallback__'\n\n// Call component.onKeyDown(event) if no other shortcuts handled\n// the current key.\nexport function addShortcutFallback (scopeKey, component) {\n  addToShortcutScope(scopeKey, FALLBACK_KEY, component)\n}\n\nexport function removeShortcutFallback (scopeKey, component) {\n  removeFromShortcutScope(scopeKey, FALLBACK_KEY, component)\n}\n\n// Direct the given event to the appropriate component in the given\n// scope for the event's key.\nexport function onKeyDownInShortcutScope (scopeKey, event) {\n  if (prefixMap) {\n    let handled = false\n    if (prefixMap && prefixMapScope === scopeKey) {\n      handled = handleEvent(scopeKey, prefixMap, event.key, event)\n    }\n    prefixMap = null\n    prefixMapScope = null\n    if (handled) {\n      return\n    }\n  }\n  const keyMap = scopeKeyMaps[scopeKey]\n  if (!keyMap) {\n    return\n  }\n  if (!handleEvent(scopeKey, keyMap, event.key, event)) {\n    handleEvent(scopeKey, keyMap, FALLBACK_KEY, event)\n  }\n}\n\nfunction handleEvent (scopeKey, keyMap, key, event) {\n  const value = keyMap[key] || keyMap[key.toLowerCase()] // treat uppercase and lowercase the same (e.g. caps lock)\n  if (!value) {\n    return false\n  }\n  if (KeyMap.prototype.isPrototypeOf(value)) { // eslint-disable-line no-prototype-builtins\n    prefixMap = value\n    prefixMapScope = scopeKey\n  } else {\n    value.onKeyDown(event)\n  }\n  return true\n}\n\nfunction onKeyDown (event) {\n  if (store.get().disableHotkeys) {\n    return\n  }\n  if (!acceptShortcutEvent(event)) {\n    return\n  }\n  onKeyDownInShortcutScope(currentScopeKey, event)\n}\n\nfunction mapKeys (keyMap, keys, component) {\n  keys.split('|').forEach(\n    (seq) => {\n      const seqArray = seq.split(' ')\n      const prefixLen = seqArray.length - 1\n      let currentMap = keyMap\n      let i = -1\n      while (++i < prefixLen) {\n        let prefixMap = currentMap[seqArray[i]]\n        if (!prefixMap) {\n          prefixMap = new KeyMap()\n          currentMap[seqArray[i]] = prefixMap\n        }\n        currentMap = prefixMap\n      }\n      currentMap[seqArray[prefixLen]] = component\n    })\n}\n\nfunction unmapKeys (keyMap, keys, component) {\n  keys.split('|').forEach(\n    (seq) => {\n      const seqArray = seq.split(' ')\n      const prefixLen = seqArray.length - 1\n      let currentMap = keyMap\n      let i = -1\n      while (++i < prefixLen) {\n        const prefixMap = currentMap[seqArray[i]]\n        if (!prefixMap) {\n          return\n        }\n        currentMap = prefixMap\n      }\n      const lastKey = seqArray[prefixLen]\n      if (currentMap[lastKey] === component) {\n        delete currentMap[lastKey]\n      }\n    })\n}\n\nfunction acceptShortcutEvent (event) {\n  const { target } = event\n  return !(\n    event.altKey ||\n    event.metaKey ||\n    event.ctrlKey ||\n    (event.shiftKey && event.key !== '?') || // '?' is a special case - it is allowed\n    (target && (\n      target.isContentEditable ||\n        ['TEXTAREA', 'SELECT'].includes(target.tagName) ||\n        (target.tagName === 'INPUT' && !['radio', 'checkbox'].includes(target.getAttribute('type')))\n    ))\n  )\n}\n"],"sourceRoot":""}