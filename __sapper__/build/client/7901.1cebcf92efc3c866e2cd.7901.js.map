{"version":3,"sources":["webpack://pinafore/./src/routes/_components/dialog/components/EmojiDialog.html","webpack://pinafore/./src/routes/_utils/isDarkTheme.js","webpack://pinafore/./src/routes/_components/dialog/creators/showEmojiDialog.js","webpack://pinafore/./src/routes/_static/emojiPickerIntl.js","webpack://pinafore/./src/routes/_static/themes.js","webpack://pinafore/./src/routes/_utils/convertCustomEmojiToEmojiPickerFormat.js"],"names":["$currentTheme","themeName","themes","_","name","dark","show","close","event","realm","this","get","detail","emoji","key","target","shadowRoot","activeElement","tagName","stopPropagation","onCreateDialog","customEmoji","enableGrayscale","isUserTouching","store","picker","refs","i18n","style","document","createElement","textContent","appendChild","on","doubleRAF","requestAnimationFrame","querySelector","focus","supportsFocusVisible","applyFocusVisiblePolyfill","emojiPickerLocale","emojiPickerDataSource","onEmojiSelected","onPickerKeydown","id","label","title","darkMode","$currentCustomEmoji","$autoplayGifs","convertCustomEmojiToEmojiPickerFormat","showEmojiDialog","emojiPickerI18n","color","autoplayGifs","filter","visible_in_picker","map","shortcode","shortcodes","url","static_url","category"],"mappings":"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","file":"7901.1cebcf92efc3c866e2cd.7901.js","sourcesContent":["<ModalDialog\n  {id}\n  {label}\n  {title}\n  shrinkWidthToFit={true}\n  background=\"var(--main-bg)\"\n>\n  <div class=\"emoji-container\">\n    <emoji-picker\n      ref:picker\n      locale={emojiPickerLocale}\n      data-source={emojiPickerDataSource}\n      class={darkMode ? 'dark' : 'light'}\n      on:emoji-click=\"onEmojiSelected(event)\"\n      on:keydown=\"onPickerKeydown(event)\"\n    ></emoji-picker>\n  </div>\n</ModalDialog>\n<style>\n  emoji-picker {\n    --indicator-color: var(--main-theme-color);\n    --outline-color: var(--focus-outline);\n  }\n\n  @media (max-width: 479px) {\n    .emoji-container, emoji-picker {\n      width: 100%;\n    }\n  }\n\n  @media (max-width: 320px) {\n    emoji-picker {\n      --emoji-padding: 0.25rem;\n      --input-padding: 0.125rem;\n    }\n    emoji-picker {\n      --num-columns: 6;\n    }\n  }\n\n  @media (max-width: 240px) {\n    emoji-picker {\n      --num-columns: 6;\n      --emoji-size: 1.125rem;\n      --emoji-padding: 0.125rem;\n      height: 240px;\n    }\n  }\n\n  @media (max-height: 450px) {\n    emoji-picker {\n      height: calc(100vh - 75px); /* leave room for the dialog bar */\n    }\n  }\n</style>\n<script>\n  import ModalDialog from './ModalDialog.html'\n  import { store } from '../../../_store/store'\n  import { insertEmoji } from '../../../_actions/emoji'\n  import { show } from '../helpers/showDialog'\n  import { close } from '../helpers/closeDialog'\n  import { oncreate as onCreateDialog } from '../helpers/onCreateDialog'\n  import { isDarkTheme } from '../../../_utils/isDarkTheme'\n  import 'emoji-picker-element/picker'\n  import { registerShadowRoot, unregisterShadowRoot } from '../../../_thirdparty/a11y-dialog/a11y-dialog'\n  import { doubleRAF } from '../../../_utils/doubleRAF'\n  import { convertCustomEmojiToEmojiPickerFormat } from '../../../_utils/convertCustomEmojiToEmojiPickerFormat'\n  import { supportsFocusVisible } from '../../../_utils/supportsFocusVisible'\n  import { importFocusVisible } from '../../../_utils/polyfills/asyncPolyfills'\n  import { emojiPickerI18n, emojiPickerDataSource, emojiPickerLocale } from '../../../_static/emojiPickerIntl'\n\n  export default {\n    async oncreate () {\n      onCreateDialog.call(this)\n      const { customEmoji } = this.get()\n      const { enableGrayscale, isUserTouching } = this.store.get()\n      const { picker } = this.refs\n      picker.customEmoji = customEmoji\n      if (emojiPickerI18n) {\n        picker.i18n = emojiPickerI18n\n      }\n      // break into shadow DOM to fix grayscale in Wellness grayscale mode\n      if (enableGrayscale) {\n        const style = document.createElement('style')\n        style.textContent = '.emoji { filter: grayscale(100%); }'\n        picker.shadowRoot.appendChild(style)\n      }\n      registerShadowRoot(picker.shadowRoot)\n      this.on('destroy', () => unregisterShadowRoot(picker.shadowRoot))\n      if (!isUserTouching) { // auto focus the input on desktop\n        doubleRAF(() => { // triple rAF because a11y tries to focus as well\n          requestAnimationFrame(() => {\n            picker.shadowRoot.querySelector('input').focus()\n          })\n        })\n      }\n      if (!supportsFocusVisible()) {\n        await importFocusVisible()\n        /* global applyFocusVisiblePolyfill */\n        applyFocusVisiblePolyfill(picker.shadowRoot)\n      }\n    },\n    components: {\n      ModalDialog\n    },\n    store: () => store,\n    data: () => ({\n      emojiPickerLocale,\n      emojiPickerDataSource\n    }),\n    computed: {\n      darkMode: ({ $currentTheme }) => isDarkTheme($currentTheme),\n      customEmoji: ({ $currentCustomEmoji, $autoplayGifs }) => (\n        convertCustomEmojiToEmojiPickerFormat($currentCustomEmoji, $autoplayGifs)\n      )\n    },\n    methods: {\n      show,\n      close,\n      onEmojiSelected (event) {\n        const { realm } = this.get()\n        insertEmoji(realm, event.detail.emoji)\n        this.close()\n      },\n      onPickerKeydown (event) {\n        // workaround for shortcuts -- see acceptShortcutEvent() in shortcuts.js\n        if (event.key === 'Backspace' &&\n          event.target.shadowRoot.activeElement &&\n          event.target.shadowRoot.activeElement.tagName === 'INPUT') {\n          event.stopPropagation() // prevent our hotkeys from activating when pressing backspace in the input\n        }\n      }\n    }\n  }\n</script>\n","import { themes } from '../_static/themes'\nimport { DEFAULT_THEME } from './themeEngine'\n\nexport function isDarkTheme (themeName) {\n  const theme = themes.find(_ => _.name === themeName) || themes.find(_ => _.name === DEFAULT_THEME)\n  return theme.dark\n}\n","import EmojiDialog from '../components/EmojiDialog.html'\nimport { showDialog } from './showDialog'\n\nexport default function showEmojiDialog (realm) {\n  return showDialog(EmojiDialog, {\n    label: \"Emoji\",\n    title: \"Emoji\",\n    realm\n  })\n}\n","import { LOCALE } from './intl'\n\nexport const emojiPickerDataSource = `/emoji-${LOCALE}.json`\n\n// this should be undefined for English; it's already bundled with emoji-picker-element\nexport const emojiPickerI18n = process.env.EMOJI_PICKER_I18N\n\n// To avoid creating a new IDB database named emoji-picker-en-US, just\n// reuse the existing default \"en\" one (otherwise people will end up with\n// a stale database taking up useless space)\nexport const emojiPickerLocale = LOCALE === 'en-US' ? 'en' : LOCALE\n","const themes = [\n  {\n    name: 'default',\n    label: \"Royal\",\n    dark: false,\n    color: 'royalblue'\n  },\n  {\n    name: 'scarlet',\n    label: \"Scarlet\",\n    dark: false,\n    color: '#e04e41'\n  },\n  {\n    name: 'seafoam',\n    label: \"Seafoam\",\n    dark: false,\n    color: '#177380'\n  },\n  {\n    name: 'hotpants',\n    label: \"Hotpants\",\n    dark: false,\n    color: 'hotpink'\n  },\n  {\n    name: 'oaken',\n    label: \"Oaken\",\n    dark: false,\n    color: 'saddlebrown'\n  },\n  {\n    name: 'majesty',\n    label: \"Majesty\",\n    dark: false,\n    color: 'blueviolet'\n  },\n  {\n    name: 'gecko',\n    label: \"Gecko\",\n    dark: false,\n    color: '#4ab92f'\n  },\n  {\n    name: 'grayscale',\n    label: \"Grayscale\",\n    dark: false,\n    color: '#999999'\n  },\n  {\n    name: 'ozark',\n    label: \"Ozark\",\n    dark: true,\n    color: '#5263af'\n  },\n  {\n    name: 'cobalt',\n    label: \"Cobalt\",\n    dark: true,\n    color: '#08439b'\n  },\n  {\n    name: 'sorcery',\n    label: \"Sorcery\",\n    dark: true,\n    color: '#ae91e8'\n  },\n  {\n    name: 'punk',\n    label: \"Punk\",\n    dark: true,\n    color: '#e04e41'\n  },\n  {\n    name: 'riot',\n    label: \"Riot\",\n    dark: true,\n    color: 'hotpink'\n  },\n  {\n    name: 'hacker',\n    label: \"Hacker\",\n    dark: true,\n    color: '#4ab92f'\n  },\n  {\n    name: 'mastodon',\n    label: \"Mastodon\",\n    dark: true,\n    color: '#282C37'\n  },\n  {\n    name: 'pitchblack',\n    label: \"Pitch Black\",\n    dark: true,\n    color: '#000'\n  },\n  {\n    name: 'dark-grayscale',\n    label: \"Dark Grayscale\",\n    dark: true,\n    color: '#666'\n  }\n]\n\nexport { themes }\n","export function convertCustomEmojiToEmojiPickerFormat (customEmoji, autoplayGifs) {\n  if (!customEmoji) {\n    return []\n  }\n  return customEmoji.filter(emoji => emoji.visible_in_picker).map(emoji => ({\n    name: emoji.shortcode,\n    shortcodes: [emoji.shortcode],\n    url: autoplayGifs ? emoji.url : emoji.static_url,\n    category: emoji.category\n  }))\n}\n"],"sourceRoot":""}