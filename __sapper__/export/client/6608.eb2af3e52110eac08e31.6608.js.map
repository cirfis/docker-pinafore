{"version":3,"sources":["webpack://pinafore/./src/routes/_components/toast/Toast.html"],"names":["observe","push","splice","text","this","_queue","then","set","shown","Promise","resolve","setTimeout","messages","length","onNewToast"],"mappings":"gKAmEa,CACPA,QAAO,KACPC,KAAI,KACJC,OAAM,KACN,IAAKC,GACHC,KAAKH,KAAK,WAAYE,IAExB,WAAYA,GACVC,KAAKC,OAASD,KAAKC,OAAOC,MAAK,KAC7BF,KAAKG,IAAI,CACPJ,KAAMA,EACNK,OAAO,IAEF,IAAIC,SAAQC,IACjBC,WAAWD,EAhCM,WAkClBJ,MAAK,KACNF,KAAKG,IAAI,CACPC,OAAO,IAEF,IAAIC,SAAQC,IACjBC,WAAWD,EAtCQ,a,aAIzBN,KAAKC,OAASI,QAAQC,UACtBN,KAAKJ,QAAQ,YAAaY,IACpBA,EAASC,SACXT,KAAKU,WAAWF,EAAS,IACzBR,KAAKF,OAAO,WAAY,EAAG,O,yEAIpB,CACXC,KAAM,GACNK,OAAO,EACPI,SAAU,I,m1BA/DXT,M,+JAAAA,M,2HAFoBK,MAAQ,QAAU,IAAE,mB,sDAA8B,EAAAA,Q,gFAEtEL,M,kCAFoBK,MAAQ,QAAU,IAAE,qB,gCAA8B,EAAAA,S","file":"6608.eb2af3e52110eac08e31.6608.js","sourcesContent":["<div class=\"toast-modal {shown ? 'shown' : ''}\" role=\"alert\" aria-hidden={!shown}>\n  <div class=\"toast-container\">\n    {text}\n  </div>\n</div>\n<style>\n  .toast-modal {\n    position: fixed;\n    bottom: 40px;\n    left: 0;\n    right: 0;\n    opacity: 0;\n    transition: opacity 0.2s linear;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    pointer-events: none;\n    z-index: 100000;\n  }\n\n  .toast-container {\n    max-width: 600px;\n    max-height: 20vh;\n    overflow: hidden;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    border: 2px solid var(--toast-border);\n    background: var(--toast-bg);\n    border-radius: 5px;\n    margin: 0 40px;\n    padding: 20px;\n    font-size: 1.3em;\n    color: var(--toast-text);\n  }\n\n  .toast-modal.shown {\n    opacity: 0.9;\n  }\n\n  @media (max-width: 767px) {\n    .toast-container {\n      max-width: 80vw;\n    }\n  }\n</style>\n<script>\n  import { splice, push, observe } from 'svelte-extras'\n\n  const TIME_TO_SHOW_TOAST = 5000\n  const DELAY_BETWEEN_TOASTS = 1000\n\n  export default {\n    oncreate () {\n      this._queue = Promise.resolve()\n      this.observe('messages', (messages) => {\n        if (messages.length) {\n          this.onNewToast(messages[0])\n          this.splice('messages', 0, 1)\n        }\n      })\n    },\n    data: () => ({\n      text: '',\n      shown: false,\n      messages: []\n    }),\n    methods: {\n      observe,\n      push,\n      splice,\n      say (text) {\n        this.push('messages', text)\n      },\n      onNewToast (text) {\n        this._queue = this._queue.then(() => {\n          this.set({\n            text: text,\n            shown: true\n          })\n          return new Promise(resolve => {\n            setTimeout(resolve, TIME_TO_SHOW_TOAST)\n          })\n        }).then(() => {\n          this.set({\n            shown: false\n          })\n          return new Promise(resolve => {\n            setTimeout(resolve, DELAY_BETWEEN_TOASTS)\n          })\n        })\n      }\n    }\n  }\n</script>\n"],"sourceRoot":""}