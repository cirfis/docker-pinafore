{"version":3,"sources":["webpack://pinafore/./src/routes/_components/ExternalLink.html","webpack://pinafore/./src/routes/_components/settings/instance/InstanceUserProfile.html","webpack://pinafore/./src/routes/_components/settings/instance/GenericInstanceSettings.html","webpack://pinafore/./src/routes/_components/settings/instance/HomeTimelineFilterSettings.html","webpack://pinafore/./src/routes/_components/settings/instance/NotificationFilterSettings.html","webpack://pinafore/./src/routes/_components/dialog/asyncDialogs/importShowTextConfirmationDialog.js","webpack://pinafore/./src/routes/_components/settings/instance/PushNotificationSettings.html","webpack://pinafore/./src/routes/_components/settings/instance/InstanceActions.html","webpack://pinafore/./src/routes/_components/dialog/asyncDialogs/importShowWordFilterDialog.js","webpack://pinafore/./src/routes/_components/settings/instance/WordFilterSettings.html","webpack://pinafore/./src/routes/_pages/settings/instances/[instanceName].html","webpack://pinafore/./src/routes/settings/instances/[instanceName].html"],"names":["className","undefined","normalIconColor","ariaLabel","showIcon","href","computedClass","verifyCredentials","acct","url","event","instanceName","this","get","target","store","setInstanceSetting","name","checked","options","form","refs","key","defaultValue","elements","getInstanceSetting","onChange","option","label","i","importShowTextConfirmationDialog","then","mod","default","e","alerts","u","err","message","startsWith","text","formatIntl","instance","on","toast","error","pushSubscription","getInstanceData","onPushSettingsChange","pushNotificationsSupport","$notificationPermission","$loggedInInstancesInOrder","length","$pushNotificationsSupport","preventDefault","setTimeout","onSwitchToThisInstance","$currentInstance","onLogOut","importShowWordFilterDialog","listFormat","Intl","ListFormat","style","type","showWordFilterDialog","filter","id","formattedFilters","phrase","formattedContexts","edit","del","filters","add","$instanceFilters","map","format","context","Promise","all","params","$verifyCredentials","pageComponent"],"mappings":"qbA4BiB,CACXA,eAAWC,EACXC,iBAAiB,EACjBC,UAAW,GACXC,UAAU,G,qmBA3BY,e,qOAHxBC,M,yBACWF,W,cACLG,cAAa,mB,iGACHF,S,mEAHhBC,M,uCACWF,W,gCACLG,cAAa,oB,gWAuBvB,UAQsB,UAAEN,EAAS,SAAEI,EAAQ,gBAAEF,I,OAAuB,OAC5D,gBACAF,EACAI,GAAY,0BACZF,GAAmB,qB,8NCjCM,Q,ymBAA5B,IAAM,EAAAK,kBAAkBC,K,aAJRD,kBAAiB,Y,gFAGhBA,kBAAkBE,K,sFAIPF,mB,ohCAPZA,mB,sCAIhB,IAAM,EAAAA,kBAAkBC,Q,qDADPD,kBAAkBE,K,qDAIPF,mB,0RCajC,MAQa,CACP,SAAUG,GACR,MAAM,aAAEC,GAAiBC,KAAKC,OACxB,OAAEC,GAAWJ,EACnBE,KAAKG,MAAMC,mBAAmBL,EAAcG,EAAOG,KAAMH,EAAOI,W,aAVlE,MAAM,aAAEP,EAAY,QAAEQ,GAAYP,KAAKC,OACjC,KAAEO,GAASR,KAAKS,KACtB,IAAK,MAAM,IAAEC,EAAG,aAAEC,KAAkBJ,EAClCC,EAAKI,SAASF,GAAKJ,QAAUN,KAAKG,MAAMU,mBAAmBd,EAAcW,EAAKC,G,gDAlB9DG,SAAShB,G,sQAGZ,I,IAAZiB,OAAOC,M,IATLC,EAAI,GAAC,I,ogBAIkBF,OAAOL,I,WACrBK,OAAOL,I,iCAGQK,OAAOL,I,yIAR/BO,EAAI,E,+FAImBF,OAAOL,O,4BACrBK,OAAOL,O,8BAIlBK,OAAOC,S,oDADmBD,OAAOL,O,4KA0BzBP,EAAA,E,yHAnCNI,Q,aAAsBQ,OAAOL,I,gBAAlC,a,mdADcM,O,mLACTT,Q,mFADSS,Q,qiBCSH,CACXT,QAAS,CACP,CACEG,IAAK,KACLM,MAAO,cACPL,cAAc,GAEhB,CACED,IAAK,KACLM,MAAO,eACPL,cAAc,K,8EAnBrBZ,a,UACAQ,Q,wMADAR,c,wBACAQ,S,2RCcc,CACXA,QAAS,CACP,CACEG,IAAK,KACLM,MAAO,gBACPL,cAAc,GAEhB,CACED,IAAK,KACLM,MAAO,YACPL,cAAc,GAEhB,CACED,IAAK,KACLM,MAAO,SACPL,cAAc,GAEhB,CACED,IAAK,KACLM,MAAO,WACPL,cAAc,GAEhB,CACED,IAAK,KACLM,MAAO,eACPL,cAAc,K,8EAxCrBZ,a,UACAQ,Q,uMADAR,c,wBACAQ,S,wNCFUW,EAAmC,IAAM,4EAEpDC,MAAKC,GAAOA,EAAIC,U,4DCkFL,CACP,2BAA4BC,GAC1B,MAAM,aAAEvB,EAAY,QAAEQ,GAAYP,KAAKC,OACjC,KAAEO,GAASR,KAAKS,KAChBc,EAAS,GAEf,IAAK,MAAM,IAAEb,KAASH,EACpBgB,EAAOb,GAAOF,EAAKI,SAASF,GAAKJ,QAGnC,UACQ,IAAAkB,GAAazB,EAAcwB,GACjC,MAAOE,GAIP,GAHAH,EAAEpB,OAAOI,SAAWgB,EAAEpB,OAAOI,QAGzBmB,EAAIC,QAAQC,WAAW,QAAS,QACOT,KACd,CACzBU,MAAM,EAAAC,EAAA,GAAW,CAAC,+EAA+E,CAAC,YAAY,KAAM,CAAEC,SAAU/B,MAC/HgC,GAAG,YAAY,MACD,QAAiBhC,WAGlCiC,EAAA,OAAU,EAAAH,EAAA,GAAW,CAAC,gDAAgD,CAAC,UAAW,CAChFI,MAAOR,EAAIC,SAAW,S,mBA/D9B,MAAM,aAAE3B,EAAY,QAAEQ,GAAYP,KAAKC,YACjC,OAAkCF,GAExC,MAAM,KAAES,GAASR,KAAKS,KAChByB,EAAmBlC,KAAKG,MAAMgC,gBAAgBpC,EAAc,qBAElE,IAAK,MAAM,IAAEW,KAASH,EACpBC,EAAKI,SAASF,GAAKJ,SAAU,QAAI4B,EAAkB,CAAC,SAAUxB,I,gDAjC9C0B,qBAAqBtC,G,q6CACmB,I,IAAZiB,OAAOC,M,IARhDC,EAAI,GAAC,I,mhBAIqBF,OAAOL,I,WACxBK,OAAOL,I,cACF,EAAA2B,yB,oCAEatB,OAAOL,I,yIARlCO,EAAI,E,kGAIsBF,OAAOL,O,4BACxBK,OAAOL,O,8CACF,EAAA2B,4B,kCAE2BtB,OAAOC,S,uDAArBD,OAAOL,O,kLAmC5BP,EAAA,E,8IACA,CACXI,QAAS,CACP,CACEG,IAAK,SACLM,MAAO,iBAET,CACEN,IAAK,YACLM,MAAO,aAET,CACEN,IAAK,SACLM,MAAO,UAET,CACEN,IAAK,UACLM,MAAO,YAET,CACEN,IAAK,OACLM,MAAO,mB,2gBA5EmB,I,EAA7BqB,yBAAkC,EAEF,W,EAA5BC,wBAAoC,E,EAEpCC,0BAA0BC,OAAS,EAAC,O,6BAOpCjC,Q,aAAsBQ,OAAOL,I,gBAAlC,a,0kBAHc,EAAA2B,2B,6VAGT9B,Q,oFAHS,EAAA8B,4B,knBAmCpB,UAsCiC,0BAAEI,I,OAAgCA,E,8DCvDnE,EAEa,CACP,uBAAwBnB,GACtBA,EAAEoB,iBACF,MAAM,aAAE3C,GAAiBC,KAAKC,OAC9B,QAAiBF,IAEnB,eAAgBuB,GACdA,EAAEoB,iBACF,MAAM,aAAE3C,GAAiBC,KAAKC,aAEWiB,KACd,CACzBU,MAAM,EAAAC,EAAA,GAAW,CAAC,cAAc,CAAC,YAAY,KAAM,CAAEC,SAAU/B,MAC9DgC,GAAG,YAAY,KAEhBY,YAAW,MACK,QAAiB5C,KAC9B,U,wCA3CS6C,uBAAuB9C,G,mZAyB5BK,EAAA,E,4jBA3BVoC,0BAA0BC,OAAS,GAAK,EAAAK,mBAAqB,EAAA9C,cAAY,K,gBAM5D+C,SAAShD,G,klBANtByC,0BAA0BC,OAAS,GAAK,EAAAK,mBAAqB,EAAA9C,a,gVCD7D,MAAMgD,EAA6B,IAAM,sFAE9C5B,MAAKC,GAAOA,EAAIC,U,cC2DhB,MAAM2B,GAAa,E,QAAA,IAAM,IAAM,IAAIC,KAAKC,WAAW,IAAQ,CAAEC,MAAO,OAAQC,KAAM,kB,OA0BvE,CACP,YACE,MAAM,aAAErD,GAAiBC,KAAKC,MACxBoD,QAA6BN,UAC7BM,EAAqB,CAAEtD,kBAE/B,WAAYuD,GACV,MAAM,aAAEvD,GAAiBC,KAAKC,MACxBoD,QAA6BN,UAC7BM,EAAqB,CAAEtD,eAAcuD,YAE7C,UAAWA,GACT,MAAM,aAAEvD,GAAiBC,KAAKC,YACxB,QAAaF,EAAcuD,EAAOC,M,4eAxFjCC,iB,aAA4BF,OAAOC,G,gBAAxC,a,03CAAKC,iB,qIAE0C,MACW,U,IADxBF,OAAOG,OAAM,IACbH,OAAOI,kB,yFAE6C,K,4BAA7BC,KAAK,EAAAL,W,8FAGwB,K,mCAA5BM,IAAI,EAAAN,W,6jCAN5BA,OAAOG,U,0CACPH,OAAOI,qB,gHAiDlCvD,EAAA,E,qtBA/DV0D,QAAQrB,OAAM,G,uCA4BasB,M,olCAkClC,UAGgB,aAAE/D,EAAY,iBAAEgE,I,OAAuBA,EAAiBhE,IAAiB,G,8FAChE,QAAE8D,I,OAAcA,EAAQG,KAAIV,IAAU,IACpDA,EACHI,kBAAmBV,IAAaiB,OAAOX,EAAOY,QAAQF,KAAIE,IACxD,OAAQA,GACN,IAAK,OACH,MAAO,iBACT,IAAK,gBACH,MAAO,gBACT,IAAK,SACH,MAAO,mBACT,IAAK,SACH,MAAO,gBACT,IAAK,UACH,MAAO,WACT,QACE,MAAO,mB,+DCzCf,MAAM,aAAEnE,GAAiBC,KAAKC,YACxBkE,QAAQC,IAAI,EAChB,QAAmCrE,IACnC,QAAyBA,K,4FAvCPJ,mB,8DAENI,c,gEAEaA,c,8DAEAA,c,8DAERA,c,+DAEMA,c,8DACTA,c,uoEAXIJ,mB,qDAENI,c,qDAEaA,c,qDAEAA,c,qDAERA,c,qDAEMA,c,qDACTA,c,iYAf6B,M,uCA8ClCI,EAAA,E,4fA9CekE,OAAOtE,a,IAEf,2B,gCAHkBsE,OAAOtE,a,QAAsBsE,OAAOtE,c,ikBAC9CsE,OAAOtE,gB,eAEhCJ,kB,uHAHmC0E,OAAOtE,c,qBAAsBsE,OAAOtE,c,+aAuC9E,UAUqB,OAAEsE,I,OAAaA,EAAOtE,a,kIACjB,mBAAEuE,EAAkB,aAAEvE,I,OAAmBuE,GAAsBA,EAAmBvE,G,sHCnC3F,CACXwE,cAAa,I,sEAhBLF,OAAOtE,aAAY,cAAiB,G,iEAErCwE,c,SAAgBF,Q,gQAFfA,OAAOtE,c,uDAERwE,e,sBAAgBF,Q","file":"7434.d4a7d54d4129399f54d9.settings_instances_$instanceName.js","sourcesContent":["<a rel=\"nofollow noopener\"\n   target=\"_blank\"\n   {href}\n   aria-label={ariaLabel}\n   class={computedClass}>\n  <slot></slot>{#if showIcon}\n    <SvgIcon className=\"external-link-svg\" href=\"#fa-external-link\" />\n  {/if}</a>\n<style>\n  .external-link-with-icon {\n    display: inline-flex;\n    align-items: center;\n  }\n  :global(.external-link-with-icon .external-link-svg) {\n    margin-left: 4px;\n    width: 14px;\n    height: 14px;\n    fill: var(--deemphasized-text-color);\n  }\n  :global(.external-link-with-icon.normal-icon-color .external-link-svg) {\n    fill: var(--body-text-color);\n  }\n</style>\n<script>\n  import { classname } from '../_utils/classname'\n  import SvgIcon from './SvgIcon.html'\n\n  export default {\n    data: () => ({\n      className: undefined,\n      normalIconColor: false,\n      ariaLabel: '',\n      showIcon: false\n    }),\n    computed: {\n      computedClass: ({ className, showIcon, normalIconColor }) => (classname(\n        'external-link',\n        className,\n        showIcon && 'external-link-with-icon',\n        normalIconColor && 'normal-icon-color'\n      ))\n    },\n    components: {\n      SvgIcon\n    }\n  }\n</script>\n","<div class=\"generic-instance-settings acct-current-user\">\n  <div class=\"acct-avatar\">\n    <Avatar account={verifyCredentials} size=\"big\" />\n  </div>\n  <ExternalLink className=\"acct-handle\"\n                href={verifyCredentials.url} >\n    {'@' + verifyCredentials.acct}\n  </ExternalLink>\n  <span class=\"acct-display-name\">\n    <AccountDisplayName account={verifyCredentials} />\n  </span>\n</div>\n<GenericInstanceSettingsStyle />\n<style>\n  .acct-current-user {\n    line-height: 1.4;\n    display: grid;\n    align-items: center;\n    font-size: 1.3em;\n    grid-template-areas:\n      \"avatar handle\"\n      \"avatar display-name\";\n    grid-template-columns: min-content 1fr;\n    grid-column-gap: 20px;\n    grid-row-gap: 10px;\n  }\n  :global(.acct-avatar) {\n    grid-area: avatar;\n  }\n  :global(.acct-handle) {\n    grid-area: handle;\n  }\n  .acct-display-name {\n    grid-area: display-name;\n  }\n</style>\n<script>\n  import ExternalLink from '../../ExternalLink.html'\n  import Avatar from '../../Avatar.html'\n  import AccountDisplayName from '../../profile/AccountDisplayName.html'\n  import GenericInstanceSettingsStyle from './GenericInstanceSettingsStyle.html'\n\n  export default {\n    components: {\n      Avatar,\n      ExternalLink,\n      AccountDisplayName,\n      GenericInstanceSettingsStyle\n    }\n  }\n</script>\n","<div class=\"generic-instance-settings\">\n  <form aria-label={label} ref:form>\n    {#each options as option, i (option.key) }\n      {#if i > 0}\n        <br>\n      {/if}\n      <input type=\"checkbox\"\n             id=\"instance-option-{option.key}\"\n             name=\"{option.key}\"\n             on:change=\"onChange(event)\"\n      >\n      <label for=\"instance-option-{option.key}\">\n        {option.label}\n      </label>\n    {/each}\n  </form>\n</div>\n<GenericInstanceSettingsStyle/>\n<script>\n  import GenericInstanceSettingsStyle from './GenericInstanceSettingsStyle.html'\n  import { store } from '../../../_store/store'\n\n  export default {\n    oncreate () {\n      const { instanceName, options } = this.get()\n      const { form } = this.refs\n      for (const { key, defaultValue } of options) {\n        form.elements[key].checked = this.store.getInstanceSetting(instanceName, key, defaultValue)\n      }\n    },\n    methods: {\n      onChange (event) {\n        const { instanceName } = this.get()\n        const { target } = event\n        this.store.setInstanceSetting(instanceName, target.name, target.checked)\n      }\n    },\n    store: () => store,\n    components: {\n      GenericInstanceSettingsStyle\n    }\n  }\n</script>\n","<GenericInstanceSettings\n  {instanceName}\n  {options}\n  label=\"Home timeline filter settings\"\n/>\n<script>\n  import GenericInstanceSettings from './GenericInstanceSettings.html'\n  import { HOME_REBLOGS, HOME_REPLIES } from '../../../_static/instanceSettings'\n\n  export default {\n    data: () => ({\n      options: [\n        {\n          key: HOME_REBLOGS,\n          label: \"Show boosts\",\n          defaultValue: true\n        },\n        {\n          key: HOME_REPLIES,\n          label: \"Show replies\",\n          defaultValue: true\n        }\n      ]\n    }),\n    components: {\n      GenericInstanceSettings\n    }\n  }\n</script>\n","<GenericInstanceSettings\n  {instanceName}\n  {options}\n  label=\"Notification filter settings\"\n/>\n<script>\n  import GenericInstanceSettings from './GenericInstanceSettings.html'\n  import {\n    NOTIFICATION_REBLOGS,\n    NOTIFICATION_FAVORITES,\n    NOTIFICATION_FOLLOWS,\n    NOTIFICATION_MENTIONS,\n    NOTIFICATION_POLLS\n  } from '../../../_static/instanceSettings'\n\n  export default {\n    data: () => ({\n      options: [\n        {\n          key: NOTIFICATION_FOLLOWS,\n          label: \"New followers\",\n          defaultValue: true\n        },\n        {\n          key: NOTIFICATION_FAVORITES,\n          label: \"Favorites\",\n          defaultValue: true\n        },\n        {\n          key: NOTIFICATION_REBLOGS,\n          label: \"Boosts\",\n          defaultValue: true\n        },\n        {\n          key: NOTIFICATION_MENTIONS,\n          label: \"Mentions\",\n          defaultValue: true\n        },\n        {\n          key: NOTIFICATION_POLLS,\n          label: \"Poll results\",\n          defaultValue: true\n        }\n      ]\n    }),\n    components: {\n      GenericInstanceSettings\n    }\n  }\n</script>\n","export const importShowTextConfirmationDialog = () => import(\n  '../creators/showTextConfirmationDialog'\n).then(mod => mod.default)\n","<div class=\"generic-instance-settings\">\n  {#if pushNotificationsSupport === false}\n    <p>Your browser doesn't support push notifications.</p>\n  {:elseif $notificationPermission === \"denied\"}\n    <p role=\"alert\">You have denied permission to show notifications.</p>\n  {:elseif $loggedInInstancesInOrder.length > 1}\n    <p>Note that you can only have push notifications for one instance at a time.</p>\n  {/if}\n  <form id=\"push-notification-settings\"\n        disabled=\"{!pushNotificationsSupport}\"\n        ref:form\n        aria-label=\"Push notification settings\">\n    {#each options as option, i (option.key)}\n      {#if i > 0}\n        <br>\n      {/if}\n      <input type=\"checkbox\"\n             id=\"push-notifications-{option.key}\"\n             name=\"{option.key}\"\n             disabled=\"{!pushNotificationsSupport}\"\n             on:change=\"onPushSettingsChange(event)\">\n      <label for=\"push-notifications-{option.key}\">{option.label}</label>\n    {/each}\n  </form>\n</div>\n<GenericInstanceSettingsStyle/>\n<style>\n  form[disabled=\"true\"] {\n    opacity: 0.5;\n  }\n  p {\n    margin: 0 0 10px 0;\n  }\n</style>\n<script>\n  import GenericInstanceSettingsStyle from './GenericInstanceSettingsStyle.html'\n  import { store } from '../../../_store/store'\n  import { importShowTextConfirmationDialog } from '../../dialog/asyncDialogs/importShowTextConfirmationDialog.js'\n  import { logOutOfInstance } from '../../../_actions/instances'\n  import { updatePushSubscriptionForInstance, updateAlerts } from '../../../_actions/pushSubscription'\n  import { toast } from '../../toast/toast'\n  import { get } from '../../../_utils/lodash-lite'\n  import { formatIntl } from '../../../_utils/formatIntl'\n\n  export default {\n    async oncreate () {\n      const { instanceName, options } = this.get()\n      await updatePushSubscriptionForInstance(instanceName)\n\n      const { form } = this.refs\n      const pushSubscription = this.store.getInstanceData(instanceName, 'pushSubscriptions')\n\n      for (const { key } of options) {\n        form.elements[key].checked = get(pushSubscription, ['alerts', key])\n      }\n    },\n    store: () => store,\n    data: () => ({\n      options: [\n        {\n          key: 'follow',\n          label: \"New followers\"\n        },\n        {\n          key: 'favourite',\n          label: \"Favorites\"\n        },\n        {\n          key: 'reblog',\n          label: \"Boosts\"\n        },\n        {\n          key: 'mention',\n          label: \"Mentions\"\n        },\n        {\n          key: 'poll',\n          label: \"Poll results\"\n        }\n      ]\n    }),\n    computed: {\n      pushNotificationsSupport: ({ $pushNotificationsSupport }) => $pushNotificationsSupport\n    },\n    methods: {\n      async onPushSettingsChange (e) {\n        const { instanceName, options } = this.get()\n        const { form } = this.refs\n        const alerts = {}\n\n        for (const { key } of options) {\n          alerts[key] = form.elements[key].checked\n        }\n\n        try {\n          await updateAlerts(instanceName, alerts)\n        } catch (err) {\n          e.target.checked = !e.target.checked\n\n          // TODO: Better way to detect missing authorization scope\n          if (err.message.startsWith('403:')) {\n            const showTextConfirmationDialog = await importShowTextConfirmationDialog()\n            showTextConfirmationDialog({\n              text: formatIntl([\"You need to reauthenticate in order to enable push notification. Log out of \",[\"instance\"],\"?\"], { instance: instanceName })\n            }).on('positive', () => {\n              /* no await */ logOutOfInstance(instanceName)\n            })\n          } else {\n            toast.say(formatIntl([\"Failed to update push notification settings: \",[\"error\"]], {\n              error: err.message || ''\n            }))\n          }\n        }\n      }\n    },\n    components: {\n      GenericInstanceSettingsStyle\n    }\n  }\n</script>\n","<form class=\"instance-actions\" aria-label=\"Switch to or log out of this instance\">\n  {#if $loggedInInstancesInOrder.length > 1 && $currentInstance !== instanceName}\n    <button class=\"primary\"\n            on:click=\"onSwitchToThisInstance(event)\">\n      Switch to this instance\n    </button>\n  {/if}\n  <button on:click=\"onLogOut(event)\">Log out</button>\n</form>\n<style>\n  .instance-actions {\n    width: 100%;\n    display: flex;\n    justify-content: right;\n    margin: 20px 0;\n  }\n  .instance-actions button {\n    margin: 0 5px;\n    flex-basis: 100%;\n  }\n</style>\n<script>\n  import { store } from '../../../_store/store'\n  import { importShowTextConfirmationDialog } from '../../dialog/asyncDialogs/importShowTextConfirmationDialog.js'\n  import { switchToInstance, logOutOfInstance } from '../../../_actions/instances'\n  import { formatIntl } from '../../../_utils/formatIntl'\n\n  export default {\n    store: () => store,\n    methods: {\n      onSwitchToThisInstance (e) {\n        e.preventDefault()\n        const { instanceName } = this.get()\n        switchToInstance(instanceName)\n      },\n      async onLogOut (e) {\n        e.preventDefault()\n        const { instanceName } = this.get()\n\n        const showTextConfirmationDialog = await importShowTextConfirmationDialog()\n        showTextConfirmationDialog({\n          text: formatIntl([\"Log out of \",[\"instance\"],\"?\"], { instance: instanceName })\n        }).on('positive', () => {\n          // TODO: dumb timing hack because the modal navigates back while we're trying to navigate forward\n          setTimeout(() => {\n            /* no await */logOutOfInstance(instanceName)\n          }, 200)\n        })\n      }\n    }\n  }\n</script>\n","export const importShowWordFilterDialog = () => import(\n  '../creators/showWordFilterDialog'\n).then(mod => mod.default)\n","<div class=\"generic-instance-settings word-filters\">\n  {#if filters.length}\n    <table class=\"word-filters-table\">\n      <thead>\n        <tr>\n          <th>Word or phrase</th>\n          <th>Contexts</th>\n          <th></th>\n          <th></th>\n        </tr>\n      </thead>\n      <tbody>\n        {#each formattedFilters as filter (filter.id)}\n          <tr>\n            <td class=\"word-filters-break\">{filter.phrase}</td>\n            <td class=\"word-filters-break\">{filter.formattedContexts}</td>\n            <td>\n              <IconButton label=\"Edit\" href=\"#fa-pencil\" on:click=\"edit(filter)\" clickListener={true} />\n            </td>\n            <td>\n              <IconButton label=\"Delete\" href=\"#fa-trash\" on:click=\"del(filter)\" clickListener={true} />\n            </td>\n          </tr>\n        {/each}\n      </tbody>\n    </table>\n  {:else}\n    <p class=\"word-filters-p\">You don't have any word filters.</p>\n  {/if}\n  <button type=\"button\" on:click=\"add()\">Add filter</button>\n</div>\n<GenericInstanceSettingsStyle />\n<style>\n  .word-filters-table {\n    width: 100%\n  }\n  p.word-filters-p, .word-filters-table {\n    margin: 0 0 10px 0;\n  }\n\n  .word-filters-break {\n    word-break: break-word;\n    text-overflow: ellipsis;\n  }\n\n  @media (max-width: 767px) {\n    .word-filters-table {\n      table-layout: fixed;\n    }\n  }\n\n</style>\n<script>\n  import GenericInstanceSettingsStyle from './GenericInstanceSettingsStyle.html'\n  import IconButton from '../../IconButton.html'\n  import { store } from '../../../_store/store'\n  import { LOCALE } from '../../../_static/intl'\n  import { importShowWordFilterDialog } from '../../dialog/asyncDialogs/importShowWordFilterDialog'\n  import { deleteFilter } from '../../../_actions/filters'\n  import { thunk } from '../../../_utils/thunk'\n\n  const listFormat = thunk(() => new Intl.ListFormat(LOCALE, { style: 'long', type: 'conjunction' }))\n\n  export default {\n    store: () => store,\n    computed: {\n      filters: ({ instanceName, $instanceFilters }) => $instanceFilters[instanceName] || [],\n      formattedFilters: ({ filters }) => filters.map(filter => ({\n        ...filter,\n        formattedContexts: listFormat().format(filter.context.map(context => {\n          switch (context) {\n            case 'home':\n              return \"Home and lists\"\n            case 'notifications':\n              return \"Notifications\"\n            case 'public':\n              return \"Public timelines\"\n            case 'thread':\n              return \"Conversations\"\n            case 'account':\n              return \"Profiles\"\n            default:\n              return \"Unknown\"\n          }\n        }))\n      }))\n    },\n    methods: {\n      async add () {\n        const { instanceName } = this.get()\n        const showWordFilterDialog = await importShowWordFilterDialog()\n        await showWordFilterDialog({ instanceName })\n      },\n      async edit (filter) {\n        const { instanceName } = this.get()\n        const showWordFilterDialog = await importShowWordFilterDialog()\n        await showWordFilterDialog({ instanceName, filter })\n      },\n      async del (filter) {\n        const { instanceName } = this.get()\n        await deleteFilter(instanceName, filter.id)\n      }\n    },\n    components: {\n      GenericInstanceSettingsStyle,\n      IconButton\n    }\n  }\n</script>\n","<SettingsLayout page='settings/instances/{params.instanceName}' label={params.instanceName}>\n  <h1 class=\"instance-name-h1\">{params.instanceName}</h1>\n\n  {#if verifyCredentials}\n    <h2>Logged in as</h2>\n    <InstanceUserProfile {verifyCredentials} />\n    <h2>Theme</h2>\n    <ThemeSettings {instanceName} />\n    <h2>Home timeline filters</h2>\n    <HomeTimelineFilterSettings {instanceName} />\n    <h2>Notification filters</h2>\n    <NotificationFilterSettings {instanceName} />\n    <h2>Word filters</h2>\n    <WordFilterSettings {instanceName} />\n    <h2>Push notifications</h2>\n    <PushNotificationSettings {instanceName} />\n    <InstanceActions {instanceName} />\n  {/if}\n</SettingsLayout>\n<style>\n  .instance-name-h1 {\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n</style>\n<script>\n  import { store } from '../../../_store/store'\n  import SettingsLayout from '../../../_components/settings/SettingsLayout.html'\n  import InstanceUserProfile from '../../../_components/settings/instance/InstanceUserProfile.html'\n  import HomeTimelineFilterSettings from '../../../_components/settings/instance/HomeTimelineFilterSettings.html'\n  import NotificationFilterSettings from '../../../_components/settings/instance/NotificationFilterSettings.html'\n  import PushNotificationSettings from '../../../_components/settings/instance/PushNotificationSettings.html'\n  import ThemeSettings from '../../../_components/settings/instance/ThemeSettings.html'\n  import InstanceActions from '../../../_components/settings/instance/InstanceActions.html'\n  import WordFilterSettings from '../../../_components/settings/instance/WordFilterSettings.html'\n  import { updateVerifyCredentialsForInstance } from '../../../_actions/instances'\n  import { updateFiltersForInstance } from '../../../_actions/filters'\n\n  export default {\n    async oncreate () {\n      const { instanceName } = this.get()\n      await Promise.all([\n        updateVerifyCredentialsForInstance(instanceName),\n        updateFiltersForInstance(instanceName)\n      ])\n    },\n    store: () => store,\n    computed: {\n      instanceName: ({ params }) => params.instanceName,\n      verifyCredentials: ({ $verifyCredentials, instanceName }) => $verifyCredentials && $verifyCredentials[instanceName]\n    },\n    components: {\n      SettingsLayout,\n      InstanceUserProfile,\n      PushNotificationSettings,\n      ThemeSettings,\n      InstanceActions,\n      HomeTimelineFilterSettings,\n      NotificationFilterSettings,\n      WordFilterSettings\n    }\n  }\n</script>\n","<Title name=\"{params.instanceName}\" settingsPage={true} />\n\n  <LazyPage {pageComponent} {params} />\n\n<script>\n  import Title from '../../_components/Title.html'\n  import LazyPage from '../../_components/LazyPage.html'\n  import pageComponent from '../../_pages/settings/instances/[instanceName].html'\n\n  export default {\n    components: {\n\n      Title,\n      LazyPage\n    },\n    data: () => ({\n      pageComponent\n    })\n  }\n</script>\n"],"sourceRoot":""}