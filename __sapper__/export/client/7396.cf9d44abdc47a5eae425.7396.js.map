{"version":3,"sources":["webpack://pinafore/./src/routes/_api/timelines.js","webpack://pinafore/./src/routes/_actions/reportStatuses.js","webpack://pinafore/./src/routes/_api/report.js","webpack://pinafore/./src/routes/_components/dialog/components/ReportDialog.html","webpack://pinafore/./src/routes/_actions/getRecentStatusesForAccount.js","webpack://pinafore/./src/routes/_components/dialog/creators/showReportDialog.js","webpack://pinafore/./src/routes/_utils/statusHtmlToPlainText.js"],"names":["async","getTimeline","instanceName","accessToken","timeline","maxId","since","limit","timelineUrlName","startsWith","Error","getTimelineUrlPath","url","split","params","since_id","max_id","local","endsWith","only_media","exclude_replies","exclude_types","json","items","headers","timeout","map","item","last_status","reportStatuses","account","statusIds","comment","forward","currentInstance","store","accountId","account_id","status_ids","report","id","toast","e","formatIntl","error","message","show","close","statusId","event","target","checked","reportMap","this","get","displayStatuses","filter","length","onCreateDialog","status","recentStatuses","getRecentStatusesForAccount","set","err","console","loading","onChange","text","forwardDescription","forwardLabel","undefined","positiveText","label","title","doReport","reportingLabel","remoteInstance","concat","Boolean","statuses","statusHtmlToPlainText","content","mentions","acct","$currentInstance","instance","showReportDialog","domParser","DOMParser","html","doc","parseFromString","anchors","querySelectorAll","i","anchor","href","getAttribute","mention","find","innerText","massageMentions","res","paragraphs","paragraph","brs","j","br","parentNode","replaceChild","createTextNode","textContent","innerTextRetainingNewlines","s"],"mappings":"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","file":"7396.cf9d44abdc47a5eae425.7396.js","sourcesContent":["import { getWithHeaders, paramsString, DEFAULT_TIMEOUT } from '../_utils/ajax'\nimport { auth, basename } from './utils'\n\nfunction getTimelineUrlPath (timeline) {\n  switch (timeline) {\n    case 'local':\n    case 'federated':\n      return 'timelines/public'\n    case 'home':\n      return 'timelines/home'\n    case 'notifications':\n    case 'notifications/mentions':\n      return 'notifications'\n    case 'favorites':\n      return 'favourites'\n    case 'direct':\n      return 'conversations'\n    case 'bookmarks':\n      return 'bookmarks'\n  }\n  if (timeline.startsWith('tag/')) {\n    return 'timelines/tag'\n  } else if (timeline.startsWith('account/')) {\n    return 'accounts'\n  } else if (timeline.startsWith('list/')) {\n    return 'timelines/list'\n  }\n  throw new Error(`Invalid timeline type: ${timeline}`)\n}\n\nexport async function getTimeline (instanceName, accessToken, timeline, maxId, since, limit) {\n  const timelineUrlName = getTimelineUrlPath(timeline)\n  let url = `${basename(instanceName)}/api/v1/${timelineUrlName}`\n\n  if (timeline.startsWith('tag/')) {\n    url += '/' + timeline.split('/')[1]\n  } else if (timeline.startsWith('account/')) {\n    url += '/' + timeline.split('/')[1] + '/statuses'\n  } else if (timeline.startsWith('list/')) {\n    url += '/' + timeline.split('/')[1]\n  }\n\n  const params = {}\n  if (since) {\n    params.since_id = since\n  }\n\n  if (maxId) {\n    params.max_id = maxId\n  }\n\n  if (limit) {\n    params.limit = limit\n  }\n\n  if (timeline === 'local') {\n    params.local = true\n  }\n\n  if (timeline.startsWith('account/')) {\n    if (timeline.endsWith('media')) {\n      params.only_media = true\n    } else {\n      params.exclude_replies = !timeline.endsWith('/with_replies')\n    }\n  }\n\n  if (timeline === 'notifications/mentions') {\n    params.exclude_types = ['follow', 'favourite', 'reblog', 'poll']\n  }\n\n  url += '?' + paramsString(params)\n\n  console.log('fetching url', url)\n  let { json: items, headers } = await getWithHeaders(url, auth(accessToken), { timeout: DEFAULT_TIMEOUT })\n\n  if (timeline === 'direct') {\n    items = items.map(item => item.last_status)\n  }\n  return { items, headers }\n}\n","import { store } from '../_store/store'\nimport { toast } from '../_components/toast/toast'\nimport { report } from '../_api/report'\nimport { formatIntl } from '../_utils/formatIntl'\n\nexport async function reportStatuses (account, statusIds, comment, forward) {\n  const { currentInstance, accessToken } = store.get()\n  try {\n    await report(currentInstance, accessToken, account.id, statusIds, comment, forward)\n    /* no await */ toast.say(\"Submitted report\")\n  } catch (e) {\n    /* no await */ toast.say(formatIntl([\"Failed to report: \",[\"error\"]], { error: (e.message || '') }))\n  }\n}\n","import { auth, basename } from './utils'\nimport { post } from '../_utils/ajax'\n\nexport async function report (instanceName, accessToken, accountId, statusIds, comment, forward) {\n  const url = `${basename(instanceName)}/api/v1/reports`\n  return post(url, {\n    account_id: accountId,\n    status_ids: statusIds,\n    comment,\n    forward\n  }, auth(accessToken))\n}\n","<GenericConfirmationDialog\n  {id}\n  {label}\n  {title}\n  className=\"report-dialog-contents\"\n  {positiveText}\n  on:positive=\"doReport()\">\n  <div class=\"report-dialog\">\n    <div class=\"report-flex\">\n      <div class=\"recent-statuses\">\n        {#if loading}\n          <div class=\"loading-spinner-container\">\n            <LoadingSpinner />\n          </div>\n        {:else}\n          <ul>\n            {#each displayStatuses as status (status.id)}\n              <li>\n                <input type=\"checkbox\"\n                       id=\"status-report-{status.id}\"\n                       name=\"status-report-{status.id}\"\n                       checked={status.report}\n                       on:change=\"onChange(status.id, event)\"\n                >\n                <label for=\"status-report-{status.id}\">\n                  {status.text}\n                </label>\n              </li>\n            {/each}\n          </ul>\n        {/if}\n      </div>\n      <div class=\"report-info\">\n        <p>{reportingLabel}</p>\n        <label class=\"sr-only\" id=\"comments-label\">Additional comments</label>\n        <textarea bind:value=\"comment\"\n                  placeholder=\"Additional comments\"\n                  aria-labelledby=\"comments-label\"\n                  maxlength=\"1000\"></textarea>\n        {#if remoteInstance}\n          <p>{forwardDescription}</p>\n          <input type=\"checkbox\"\n                 id=\"report-forward\"\n                 name=\"report-forward\"\n                 bind:checked=\"forward\">\n          <label for=\"report-forward\">\n            {forwardLabel}\n          </label>\n        {/if}\n      </div>\n    </div>\n  </div>\n</GenericConfirmationDialog>\n<style>\n  :global(.report-dialog-contents .confirmation-dialog-form) {\n    max-width: 80vw;\n  }\n  .report-dialog {\n    padding: 20px 40px;\n    overflow-y: auto;\n  }\n  .loading-spinner-container {\n    width: 100%;\n    height: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n  ul {\n    list-style: none;\n    max-height: 30vh;\n    overflow-y: auto;\n    overflow-x: hidden;\n    border: 1px solid var(--main-border);\n  }\n  li {\n    padding: 10px 5px;\n    border-top: 1px solid var(--main-border);\n  }\n  li:first-child {\n    border-top: none;\n  }\n\n  .recent-statuses label {\n    padding: 10px 5px;\n    display: -webkit-box;\n    -webkit-line-clamp: 5;\n    -webkit-box-orient: vertical;\n  }\n  textarea {\n    width: 100%;\n    overflow-y: auto;\n    max-height: 40vh;\n    font-size: 1.3em;\n    min-height: 100px;\n  }\n  p {\n    margin: 20px 0;\n  }\n\n  .recent-statuses li {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n  }\n  .recent-statuses input {\n    margin-right: 10px;\n  }\n  .recent-statuses label {\n    width: 0;\n    flex: 1;\n    word-wrap: break-word;\n    overflow: hidden;\n    white-space: pre-wrap;\n    text-overflow: ellipsis;\n    border-left: 1px solid var(--main-border);\n    padding-left: 10px;\n  }\n\n  .report-flex {\n    display: flex;\n    flex-direction: row;\n  }\n\n  .report-flex > * {\n    flex: 1;\n  }\n\n  .report-info {\n    margin-left: 20px;\n  }\n\n  @media (max-width: 767px) {\n    .report-dialog {\n      padding: 20px;\n      overflow-x: hidden;\n      max-height: 65vh;\n    }\n    .report-flex {\n      flex-direction: column;\n    }\n    .report-info {\n      margin-left: 0;\n    }\n    textarea {\n      max-height: 20vh;\n    }\n    p, label {\n      word-wrap: break-word;\n    }\n    :global(.report-dialog-contents .confirmation-dialog-form) {\n      max-width: calc(100% - 20px);\n    }\n  }\n</style>\n<script>\n  import GenericConfirmationDialog from './GenericConfirmationDialog.html'\n  import LoadingSpinner from '../../LoadingSpinner.html'\n  import { show } from '../helpers/showDialog'\n  import { close } from '../helpers/closeDialog'\n  import { oncreate as onCreateDialog } from '../helpers/onCreateDialog'\n  import { getRecentStatusesForAccount } from '../../../_actions/getRecentStatusesForAccount'\n  import { statusHtmlToPlainText } from '../../../_utils/statusHtmlToPlainText'\n  import { toast } from '../../toast/toast'\n  import { store } from '../../../_store/store'\n  import { reportStatuses } from '../../../_actions/reportStatuses'\n  import { formatIntl } from '../../../_utils/formatIntl'\n\n  export default {\n    async oncreate () {\n      onCreateDialog.call(this)\n      const { account, status, reportMap } = this.get()\n      if (status) {\n        reportMap[status.id] = true\n      }\n      try {\n        const recentStatuses = await getRecentStatusesForAccount(account.id)\n        console.log('recentStatuses', recentStatuses)\n        this.set({ recentStatuses })\n      } catch (err) {\n        console.error(err)\n        /* no await */ toast.say(formatIntl([\"Unable to load recent toots: \",[\"error\"]], { error: (err.message || '') }))\n      } finally {\n        this.set({ loading: false })\n      }\n    },\n    store: () => store,\n    data: () => ({\n      account: undefined,\n      status: undefined,\n      positiveText: \"Report\",\n      reportMap: {},\n      recentStatuses: [],\n      loading: true,\n      forward: false,\n      comment: ''\n    }),\n    computed: {\n      displayStatuses: ({ statuses, reportMap }) => (\n        statuses.map(status => ({\n          id: status.id,\n          text: statusHtmlToPlainText(status.content, status.mentions) || \"(No content)\",\n          report: reportMap[status.id]\n        }))\n      ),\n      statuses: ({ status, recentStatuses }) => (\n        [status].concat((recentStatuses || []).filter(({ id }) => (!status || id !== status.id))).filter(Boolean)\n      ),\n      remoteInstance: ({ account }) => account.acct.split('@')[1],\n      reportingLabel: ({ account, $currentInstance }) => (\n        formatIntl([\"You are reporting \",[\"account\"],\" to the moderators of \",[\"instance\"],\".\"], {\n          account: `@${account.acct}`,\n          instance: $currentInstance\n        })\n      ),\n      forwardDescription: ({ remoteInstance }) => (\n        formatIntl([\"Forward to the moderators of \",[\"instance\"],\" as well?\"], {\n          instance: remoteInstance\n        })\n      ),\n      forwardLabel: ({ remoteInstance }) => (\n        formatIntl([\"Forward to \",[\"instance\"]], {\n          instance: remoteInstance\n        })\n      )\n    },\n    methods: {\n      show,\n      close,\n      onChange (statusId, event) {\n        const report = event.target.checked\n        const { reportMap } = this.get()\n        reportMap[statusId] = report\n      },\n      async doReport () {\n        const { displayStatuses, account, comment, forward, reportMap } = this.get()\n        const statusIds = displayStatuses.map(({ id }) => id).filter(id => reportMap[id])\n        if (!statusIds.length) {\n          toast.say(\"No toots to report\")\n        } else {\n          await reportStatuses(account, statusIds, comment, forward)\n        }\n      }\n    },\n    components: {\n      GenericConfirmationDialog,\n      LoadingSpinner\n    }\n  }\n</script>\n","import { store } from '../_store/store'\nimport { getTimeline } from '../_api/timelines'\n\nexport async function getRecentStatusesForAccount (accountId) {\n  const { currentInstance, accessToken } = store.get()\n  return (await getTimeline(currentInstance, accessToken, `account/${accountId}`, null, null, 20)).items\n}\n","import ReportDialog from '../components/ReportDialog.html'\nimport { showDialog } from './showDialog'\nimport { formatIntl } from '../../../_utils/formatIntl'\n\nexport default function showReportDialog ({ account, status }) {\n  const label = formatIntl([\"Report \",[\"account\"]], { account: `@${account.acct}` })\n  return showDialog(ReportDialog, {\n    label,\n    title: label,\n    account,\n    status\n  })\n}\n","import { mark, stop } from './marks'\nimport { massageStatusPlainText } from './massageStatusPlainText'\n\nconst domParser = process.browser && new DOMParser()\n\n// mentions like \"@foo\" have to be expanded to \"@foo@example.com\"\nfunction massageMentions (doc, mentions) {\n  const anchors = doc.querySelectorAll('a.mention')\n  for (let i = 0; i < anchors.length; i++) {\n    const anchor = anchors[i]\n    const href = anchor.getAttribute('href')\n    const mention = mentions.find(mention => mention.url === href)\n    if (mention) {\n      anchor.innerText = `@${mention.acct}`\n    }\n  }\n}\n\n// paragraphs should be separated by double newlines\n// single <br/>s should become single newlines\nfunction innerTextRetainingNewlines (doc) {\n  let res = ''\n  const paragraphs = doc.querySelectorAll('p')\n  for (let i = 0; i < paragraphs.length; i++) {\n    const paragraph = paragraphs[i]\n    const brs = paragraph.querySelectorAll('br')\n    for (let j = 0; j < brs.length; j++) {\n      const br = brs[j]\n      br.parentNode.replaceChild(doc.createTextNode('\\n'), br)\n    }\n    res += (i > 0 ? '\\n\\n' : '') + paragraph.textContent\n  }\n  return res\n}\n\nexport function statusHtmlToPlainText (html, mentions) {\n  if (!html) {\n    return ''\n  }\n  mark('statusHtmlToPlainText')\n  html = massageStatusPlainText(html)\n  const doc = domParser.parseFromString(html, 'text/html')\n  massageMentions(doc, mentions)\n  const res = innerTextRetainingNewlines(doc)\n  stop('statusHtmlToPlainText')\n  return res\n}\n"],"sourceRoot":""}