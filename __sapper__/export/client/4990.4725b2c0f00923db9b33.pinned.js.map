{"version":3,"sources":["webpack://pinafore/./node_modules/lodash-es/throttle.js","webpack://pinafore/./src/routes/_components/search/SearchResult.html","webpack://pinafore/./src/routes/_components/search/StatusSearchResult.html","webpack://pinafore/./src/routes/_pages/pinned.html","webpack://pinafore/./src/routes/pinned.html","webpack://pinafore/./src/routes/_actions/instances.js","webpack://pinafore/./src/routes/_utils/asyncModules/importVirtualListStore.js","webpack://pinafore/./src/routes/_api/instance.js","webpack://pinafore/./src/routes/_api/pinnedStatuses.js"],"names":["func","wait","options","leading","trailing","TypeError","href","index","length","status","id","currentInstance","this","store","get","accessToken","currentVerifyCredentials","statuses","set","e","toast","formatIntl","error","name","message","loading","accounts","$isUserLoggedIn","pageComponent","params","changeTheme","instanceName","newTheme","instanceThemes","enableGrayscale","switchToInstance","searchResults","queryInSearch","async","logOutOfInstance","instance","composeData","customEmoji","instanceInfos","instanceLists","loggedInInstances","loggedInInstancesInOrder","verifyCredentials","splice","indexOf","newInstance","objectsToClear","obj","timelineInitialized","timelinePreinitialized","virtualListStore","clearRealmByPrefix","database","updateVerifyCredentialsForInstance","access_token","catch","startsWith","logOutOnUnauthorized","thisVerifyCredentials","setStoreVerifyCredentials","updateInstanceInfo","info","getInstanceInfo","url","timeout","getPinnedStatuses","accountId","limit","pinned"],"mappings":"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","file":"4990.4725b2c0f00923db9b33.pinned.js","sourcesContent":["import debounce from './debounce.js';\nimport isObject from './isObject.js';\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a throttled function that only invokes `func` at most once per\n * every `wait` milliseconds. The throttled function comes with a `cancel`\n * method to cancel delayed `func` invocations and a `flush` method to\n * immediately invoke them. Provide `options` to indicate whether `func`\n * should be invoked on the leading and/or trailing edge of the `wait`\n * timeout. The `func` is invoked with the last arguments provided to the\n * throttled function. Subsequent calls to the throttled function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the throttled function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.throttle` and `_.debounce`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to throttle.\n * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=true]\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n * @example\n *\n * // Avoid excessively updating the position while scrolling.\n * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n *\n * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n * jQuery(element).on('click', throttled);\n *\n * // Cancel the trailing throttled invocation.\n * jQuery(window).on('popstate', throttled.cancel);\n */\nfunction throttle(func, wait, options) {\n  var leading = true,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  if (isObject(options)) {\n    leading = 'leading' in options ? !!options.leading : leading;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n  return debounce(func, wait, {\n    'leading': leading,\n    'maxWait': wait,\n    'trailing': trailing\n  });\n}\n\nexport default throttle;\n","<li class=\"search-result\">\n  <a {href} class=\"search-result-anchor\" rel=\"prefetch\">\n    <slot></slot>\n  </a>\n</li>\n<style>\n  .search-result {\n    box-sizing: border-box;\n    border-bottom: 1px solid var(--main-border);\n    display: flex;\n  }\n  .search-result:last-child {\n    border-bottom: none;\n  }\n  .search-result-anchor {\n    padding: 20px;\n    flex: 1;\n    background: var(--settings-list-item-bg);\n  }\n  .search-result-anchor, .search-result-anchor:visited {\n    color: var(--body-text-color);\n  }\n  .search-result-anchor:hover {\n    background: var(--settings-list-item-bg-hover);\n    text-decoration: none;\n  }\n  .search-result-anchor:active {\n    background: var(--settings-list-item-bg-active);\n  }\n\n  @media (max-width: 767px) {\n    .search-result-anchor {\n      padding: 15px 10px;\n    }\n  }\n</style>\n","<SearchResult href=\"/statuses/{status.id}\">\n  <Status {index} {length}\n          timelineType=\"search\" timelineValue=\"search\"\n          {status} />\n</SearchResult>\n<style>\n</style>\n<script>\n  import SearchResult from './SearchResult.html'\n  import Status from '../status/Status.html'\n\n  export default {\n    components: {\n      SearchResult,\n      Status\n    }\n  }\n</script>","<DynamicPageBanner title=\"Pinned toots\" icon=\"#fa-thumb-tack\" />\n{#if $isUserLoggedIn }\n  <div class=\"pinned-toots-page\">\n    {#if loading}\n    <LoadingPage />\n    {:elseif statuses && statuses.length}\n    <ul class=\"pinned-toots-results\">\n      {#each statuses as status, index}\n      <StatusSearchResult {status} {index} length={statuses.length} />\n      {/each}\n    </ul>\n    {/if}\n  </div>\n{/if}\n<style>\n  .pinned-toots-page {\n    padding: 20px 20px;\n    position: relative;\n  }\n  .pinned-toots-results {\n    list-style: none;\n    box-sizing: border-box;\n    border: 1px solid var(--main-border);\n    border-radius: 2px;\n  }\n  @media (max-width: 767px) {\n    .pinned-toots-page {\n      padding: 20px 10px;\n    }\n  }\n</style>\n<script>\n  import { store } from '../_store/store'\n  import LoadingPage from '../_components/LoadingPage.html'\n  import StatusSearchResult from '../_components/search/StatusSearchResult.html'\n  import { toast } from '../_components/toast/toast'\n  import DynamicPageBanner from '../_components/DynamicPageBanner.html'\n  import { getPinnedStatuses } from '../_api/pinnedStatuses'\n  import { updateVerifyCredentialsForInstance } from '../_actions/instances'\n  import { formatIntl } from '../_utils/formatIntl'\n\n  export default {\n    async oncreate () {\n      try {\n        const { currentInstance } = this.store.get()\n        await updateVerifyCredentialsForInstance(currentInstance)\n        const { accessToken, currentVerifyCredentials } = this.store.get()\n        const statuses = await getPinnedStatuses(currentInstance, accessToken, currentVerifyCredentials.id)\n        this.set({ statuses: statuses })\n      } catch (e) {\n        /* no await */ toast.say(formatIntl([\"Error: \",[\"error\"]], { error: (e.name || '') + ' ' + (e.message || '') }))\n      } finally {\n        this.set({ loading: false })\n      }\n    },\n    data: () => ({\n      loading: true,\n      accounts: []\n    }),\n    store: () => store,\n    components: {\n      LoadingPage,\n      StatusSearchResult,\n      DynamicPageBanner\n    }\n  }\n</script>\n","<Title name=\"Pinned toots\" />\n\n  <LazyPage {pageComponent} {params} />\n\n<script>\n  import Title from './_components/Title.html'\n  import LazyPage from './_components/LazyPage.html'\n  import pageComponent from './_pages/pinned.html'\n\n  export default {\n    components: {\n\n      Title,\n      LazyPage\n    },\n    data: () => ({\n      pageComponent\n    })\n  }\n</script>\n","import { getVerifyCredentials } from '../_api/user'\nimport { store } from '../_store/store'\nimport { switchToTheme } from '../_utils/themeEngine'\nimport { toast } from '../_components/toast/toast'\nimport { goto } from '../../../__sapper__/client'\nimport { cacheFirstUpdateAfter } from '../_utils/sync'\nimport { getInstanceInfo } from '../_api/instance'\nimport { database } from '../_database/database'\nimport { importVirtualListStore } from '../_utils/asyncModules/importVirtualListStore.js'\nimport { formatIntl } from '../_utils/formatIntl'\n\nexport function changeTheme (instanceName, newTheme) {\n  const { instanceThemes } = store.get()\n  instanceThemes[instanceName] = newTheme\n  store.set({ instanceThemes: instanceThemes })\n  store.save()\n  const { currentInstance } = store.get()\n  if (instanceName === currentInstance) {\n    const { enableGrayscale } = store.get()\n    switchToTheme(newTheme, enableGrayscale)\n  }\n}\n\nexport function switchToInstance (instanceName) {\n  const { instanceThemes } = store.get()\n  store.set({\n    currentInstance: instanceName,\n    searchResults: null,\n    queryInSearch: ''\n  })\n  store.save()\n  const { enableGrayscale } = store.get()\n  switchToTheme(instanceThemes[instanceName], enableGrayscale)\n}\n\nexport async function logOutOfInstance (instanceName, message) {\n  message = message || formatIntl([\"Logged out of \",[\"instance\"]], { instance: instanceName })\n  const {\n    composeData,\n    currentInstance,\n    customEmoji,\n    instanceInfos,\n    instanceLists,\n    instanceThemes,\n    loggedInInstances,\n    loggedInInstancesInOrder,\n    verifyCredentials\n  } = store.get()\n  loggedInInstancesInOrder.splice(loggedInInstancesInOrder.indexOf(instanceName), 1)\n  const newInstance = instanceName === currentInstance ? loggedInInstancesInOrder[0] : currentInstance\n  const objectsToClear = [\n    composeData,\n    customEmoji,\n    instanceInfos,\n    instanceLists,\n    instanceThemes,\n    loggedInInstances,\n    verifyCredentials\n  ]\n  for (const obj of objectsToClear) {\n    delete obj[instanceName]\n  }\n  store.set({\n    composeData,\n    currentInstance: newInstance,\n    customEmoji,\n    instanceInfos,\n    instanceLists,\n    instanceThemes,\n    loggedInInstances,\n    loggedInInstancesInOrder,\n    queryInSearch: '',\n    searchResults: null,\n    timelineInitialized: false,\n    timelinePreinitialized: false,\n    verifyCredentials\n  })\n  store.clearTimelineDataForInstance(instanceName)\n  store.clearAutosuggestDataForInstance(instanceName)\n  store.save()\n  const { virtualListStore } = await importVirtualListStore()\n  virtualListStore.clearRealmByPrefix(currentInstance + '/') // TODO: this is a hacky way to clear the vlist cache\n  toast.say(message)\n  const { enableGrayscale } = store.get()\n  switchToTheme(instanceThemes[newInstance], enableGrayscale)\n  /* no await */ database.clearDatabaseForInstance(instanceName)\n  goto('/settings/instances')\n}\n\nfunction setStoreVerifyCredentials (instanceName, thisVerifyCredentials) {\n  const { verifyCredentials } = store.get()\n  verifyCredentials[instanceName] = thisVerifyCredentials\n  store.set({ verifyCredentials: verifyCredentials })\n}\n\nexport async function updateVerifyCredentialsForInstance (instanceName) {\n  const { loggedInInstances } = store.get()\n  const accessToken = loggedInInstances[instanceName].access_token\n  await cacheFirstUpdateAfter(\n    () => getVerifyCredentials(instanceName, accessToken).catch(logOutOnUnauthorized(instanceName)),\n    () => database.getInstanceVerifyCredentials(instanceName),\n    verifyCredentials => database.setInstanceVerifyCredentials(instanceName, verifyCredentials),\n    verifyCredentials => setStoreVerifyCredentials(instanceName, verifyCredentials)\n  )\n}\n\nexport async function updateVerifyCredentialsForCurrentInstance () {\n  const { currentInstance } = store.get()\n  await updateVerifyCredentialsForInstance(currentInstance)\n}\n\nexport async function updateInstanceInfo (instanceName) {\n  await cacheFirstUpdateAfter(\n    () => getInstanceInfo(instanceName),\n    () => database.getInstanceInfo(instanceName),\n    info => database.setInstanceInfo(instanceName, info),\n    info => {\n      const { instanceInfos } = store.get()\n      instanceInfos[instanceName] = info\n      store.set({ instanceInfos: instanceInfos })\n    }\n  )\n}\n\nexport function logOutOnUnauthorized (instanceName) {\n  return async error => {\n    if (error.message.startsWith('401:')) {\n      await logOutOfInstance(instanceName, formatIntl([\"The access token was revoked, logged out of \",[\"instance\"]], { instance: instanceName }))\n    }\n\n    throw error\n  }\n}\n","export const importVirtualListStore = () => import(\n  '../../_components/virtualList/virtualListStore.js'\n)\n","import { get, DEFAULT_TIMEOUT } from '../_utils/ajax'\nimport { basename } from './utils'\n\nexport function getInstanceInfo (instanceName) {\n  const url = `${basename(instanceName)}/api/v1/instance`\n  return get(url, null, { timeout: DEFAULT_TIMEOUT })\n}\n","import { get, paramsString, DEFAULT_TIMEOUT } from '../_utils/ajax'\nimport { auth, basename } from './utils'\n\nexport async function getPinnedStatuses (instanceName, accessToken, accountId) {\n  let url = `${basename(instanceName)}/api/v1/accounts/${accountId}/statuses`\n  url += '?' + paramsString({\n    limit: 40,\n    pinned: true\n  })\n  return get(url, auth(accessToken), { timeout: DEFAULT_TIMEOUT })\n}\n"],"sourceRoot":""}