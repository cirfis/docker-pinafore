{"version":3,"sources":["webpack://pinafore/./src/routes/_actions/block.js","webpack://pinafore/./src/routes/_api/block.js","webpack://pinafore/./src/routes/_actions/copyText.js","webpack://pinafore/./src/routes/_components/dialog/asyncDialogs/importShowCopyDialog.js","webpack://pinafore/./src/routes/_actions/deleteStatuses.js","webpack://pinafore/./src/routes/_actions/statuses.js","webpack://pinafore/./src/routes/_actions/follow.js","webpack://pinafore/./src/routes/_api/follow.js","webpack://pinafore/./src/routes/_actions/mute.js","webpack://pinafore/./src/routes/_api/mute.js","webpack://pinafore/./src/routes/_actions/report.js","webpack://pinafore/./src/routes/_components/dialog/asyncDialogs/importShowReportDialog.js","webpack://pinafore/./src/routes/_actions/toggleMute.js","webpack://pinafore/./src/routes/_components/dialog/asyncDialogs/importShowMuteDialog.js","webpack://pinafore/./src/routes/_actions/delete.js","webpack://pinafore/./src/routes/_api/delete.js","webpack://pinafore/./src/routes/_actions/pin.js","webpack://pinafore/./src/routes/_api/pin.js","webpack://pinafore/./src/routes/_actions/bookmark.js","webpack://pinafore/./src/routes/_api/bookmark.js","webpack://pinafore/./src/routes/_actions/muteConversation.js","webpack://pinafore/./src/routes/_api/muteConversation.js","webpack://pinafore/./src/routes/_components/dialog/components/StatusOptionsDialog.html","webpack://pinafore/./src/routes/_actions/deleteAndRedraft.js","webpack://pinafore/./src/routes/_actions/share.js","webpack://pinafore/./src/routes/_components/dialog/creators/showStatusOptionsDialog.js","webpack://pinafore/./src/routes/_utils/statusHtmlToPlainText.js"],"names":["async","setAccountBlocked","accountId","block","toastOnSuccess","currentInstance","accessToken","store","relationship","instanceName","url","timeout","blockAccount","unblockAccount","toast","e","console","error","formatIntl","message","copyText","text","navigator","clipboard","writeText","then","mod","default","filterItemIdsFromTimelines","timelineFilter","idFilter","summaryFilter","_","id","forEach","key","timelineData","Object","keys","timelineName","summaries","filteredSummaries","filter","isEqual","deleteStatusesAndNotifications","statusIdsToDelete","notificationIdsToDelete","idsToDelete","idsToDeleteSet","Set","has","deleteStatusIdsFromStore","deleteNotificationIdsFromStore","doDeleteStatus","statusId","rebloggedIds","getIdsThatRebloggedThisStatus","Array","from","concat","Boolean","statusIds","getNotificationIdsForStatuses","deleteStatus","scheduleIdleTask","setAccountFollowed","follow","followAccount","unfollowAccount","setAccountMuted","mute","notifications","muteAccount","unmuteAccount","reportStatusOrAccount","status","account","toggleMute","deletedStatus","d","setStatusPinnedOrUnpinned","pinned","pinStatus","unpinStatus","database","setStatusBookmarkedOrUnbookmarked","bookmarked","bookmarkStatus","unbookmarkStatus","setConversationMuted","muteConversation","unmuteConversation","show","close","item","this","onDeleteClicked","onPinClicked","onFollowClicked","onBlockClicked","onMuteClicked","onCopyClicked","onMuteConversationClicked","onRedraft","onShare","onReport","onBookmark","get","following","blocking","muting","mutingConversation","deleteStatusPromise","dialogPromise","importShowComposeDialog","statusHtmlToPlainText","content","mentions","contentWarningShown","spoiler_text","contentWarning","postPrivacy","visibility","media","media_attachments","map","description","data","inReplyToId","in_reply_to_id","poll","multiple","options","option","title","sensitive","deleteAndRedraft","share","undefined","shareStatus","report","supportsWebShare","items","onClick","event","label","$currentAccountRelationship","$currentAccountProfile","$currentVerifyCredentials","$currentStatusModifications","pins","verifyCredentials","requested","username","followRequested","verifyCredentialsId","isUser","find","muted","blockLabel","blockIcon","muteLabel","muteIcon","followLabel","followIcon","pinLabel","mentionsUser","muteConversationLabel","muteConversationIcon","isPublicOrUnlisted","bookmarkLabel","icon","showStatusOptionsDialog","domParser","DOMParser","html","doc","parseFromString","anchors","querySelectorAll","i","length","anchor","href","getAttribute","mention","innerText","acct","massageMentions","res","paragraphs","paragraph","brs","j","br","parentNode","replaceChild","createTextNode","textContent","innerTextRetainingNewlines","s"],"mappings":"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","file":"5343.7f3b3998fa0edae4356d.5343.js","sourcesContent":["import { store } from '../_store/store'\nimport { blockAccount, unblockAccount } from '../_api/block'\nimport { toast } from '../_components/toast/toast'\nimport { updateLocalRelationship } from './accounts'\nimport { emit } from '../_utils/eventBus'\nimport { formatIntl } from '../_utils/formatIntl'\n\nexport async function setAccountBlocked (accountId, block, toastOnSuccess) {\n  const { currentInstance, accessToken } = store.get()\n  try {\n    let relationship\n    if (block) {\n      relationship = await blockAccount(currentInstance, accessToken, accountId)\n    } else {\n      relationship = await unblockAccount(currentInstance, accessToken, accountId)\n    }\n    await updateLocalRelationship(currentInstance, accountId, relationship)\n    if (toastOnSuccess) {\n      if (block) {\n        /* no await */ toast.say(\"Blocked account\")\n      } else {\n        /* no await */ toast.say(\"Unblocked account\")\n      }\n    }\n    emit('refreshAccountsList')\n  } catch (e) {\n    console.error(e)\n    /* no await */ toast.say(block\n      ? formatIntl([\"Unable to block account: \",[\"error\"]], { block: !!block, error: (e.message || '') })\n      : formatIntl([\"Unable to unblock account: \",[\"error\"]], { error: (e.message || '') })\n    )\n  }\n}\n","import { auth, basename } from './utils'\nimport { post, WRITE_TIMEOUT } from '../_utils/ajax'\n\nexport async function blockAccount (instanceName, accessToken, accountId) {\n  const url = `${basename(instanceName)}/api/v1/accounts/${accountId}/block`\n  return post(url, null, auth(accessToken), { timeout: WRITE_TIMEOUT })\n}\n\nexport async function unblockAccount (instanceName, accessToken, accountId) {\n  const url = `${basename(instanceName)}/api/v1/accounts/${accountId}/unblock`\n  return post(url, null, auth(accessToken), { timeout: WRITE_TIMEOUT })\n}\n","import { importShowCopyDialog } from '../_components/dialog/asyncDialogs/importShowCopyDialog.js'\nimport { toast } from '../_components/toast/toast'\n\nexport async function copyText (text) {\n  if (navigator.clipboard) { // not supported in all browsers\n    try {\n      await navigator.clipboard.writeText(text)\n      /* no await */ toast.say(\"Copied to clipboard\")\n      return\n    } catch (e) {\n      console.error(e)\n    }\n  }\n\n  const showCopyDialog = await importShowCopyDialog()\n  showCopyDialog(text)\n}\n","export const importShowCopyDialog = () => import(\n  '../creators/showCopyDialog'\n).then(mod => mod.default)\n","import { getIdsThatRebloggedThisStatus, getNotificationIdsForStatuses } from './statuses'\nimport { store } from '../_store/store'\nimport isEqual from 'lodash-es/isEqual'\nimport { database } from '../_database/database'\nimport { scheduleIdleTask } from '../_utils/scheduleIdleTask'\n\nfunction filterItemIdsFromTimelines (instanceName, timelineFilter, idFilter) {\n  const keys = ['timelineItemSummaries', 'timelineItemSummariesToAdd']\n  const summaryFilter = _ => idFilter(_.id)\n\n  keys.forEach(key => {\n    const timelineData = store.getAllTimelineData(instanceName, key)\n    Object.keys(timelineData).forEach(timelineName => {\n      const summaries = timelineData[timelineName]\n      if (!timelineFilter(timelineName)) {\n        return\n      }\n      const filteredSummaries = summaries.filter(summaryFilter)\n      if (!isEqual(summaries, filteredSummaries)) {\n        console.log('deleting an item from timelineName', timelineName, 'for key', key)\n        store.setForTimeline(instanceName, timelineName, {\n          [key]: filteredSummaries\n        })\n      }\n    })\n  })\n}\n\nfunction deleteStatusIdsFromStore (instanceName, idsToDelete) {\n  const idsToDeleteSet = new Set(idsToDelete)\n  const idWasNotDeleted = id => !idsToDeleteSet.has(id)\n  const notNotificationTimeline = timelineName => timelineName !== 'notifications'\n\n  filterItemIdsFromTimelines(instanceName, notNotificationTimeline, idWasNotDeleted)\n}\n\nfunction deleteNotificationIdsFromStore (instanceName, idsToDelete) {\n  const idsToDeleteSet = new Set(idsToDelete)\n  const idWasNotDeleted = id => !idsToDeleteSet.has(id)\n  const isNotificationTimeline = timelineName => timelineName === 'notifications'\n\n  filterItemIdsFromTimelines(instanceName, isNotificationTimeline, idWasNotDeleted)\n}\n\nasync function deleteStatusesAndNotifications (instanceName, statusIdsToDelete, notificationIdsToDelete) {\n  deleteStatusIdsFromStore(instanceName, statusIdsToDelete)\n  deleteNotificationIdsFromStore(instanceName, notificationIdsToDelete)\n  await database.deleteStatusesAndNotifications(instanceName, statusIdsToDelete, notificationIdsToDelete)\n}\n\nasync function doDeleteStatus (instanceName, statusId) {\n  console.log('deleting statusId', statusId)\n  const rebloggedIds = await getIdsThatRebloggedThisStatus(instanceName, statusId)\n  const statusIdsToDelete = Array.from(new Set([statusId].concat(rebloggedIds).filter(Boolean)))\n  const notificationIdsToDelete = Array.from(new Set(await getNotificationIdsForStatuses(instanceName, statusIdsToDelete)))\n  await deleteStatusesAndNotifications(instanceName, statusIdsToDelete, notificationIdsToDelete)\n}\n\nexport function deleteStatus (instanceName, statusId) {\n  scheduleIdleTask(() => {\n    /* no await */ doDeleteStatus(instanceName, statusId)\n  })\n}\n","import { database } from '../_database/database'\n\nexport async function getIdThatThisStatusReblogged (instanceName, statusId) {\n  const status = await database.getStatus(instanceName, statusId)\n  return status.reblog && status.reblog.id\n}\n\nexport async function getIdsThatTheseStatusesReblogged (instanceName, statusIds) {\n  const reblogIds = await Promise.all(statusIds.map(async statusId => {\n    return getIdThatThisStatusReblogged(instanceName, statusId)\n  }))\n  return reblogIds.filter(Boolean)\n}\n\nexport async function getIdsThatRebloggedThisStatus (instanceName, statusId) {\n  return database.getReblogsForStatus(instanceName, statusId)\n}\n\nexport async function getNotificationIdsForStatuses (instanceName, statusIds) {\n  return database.getNotificationIdsForStatuses(instanceName, statusIds)\n}\n","import { store } from '../_store/store'\nimport { followAccount, unfollowAccount } from '../_api/follow'\nimport { toast } from '../_components/toast/toast'\nimport { updateLocalRelationship } from './accounts'\nimport { formatIntl } from '../_utils/formatIntl'\n\nexport async function setAccountFollowed (accountId, follow, toastOnSuccess) {\n  const { currentInstance, accessToken } = store.get()\n  try {\n    let relationship\n    if (follow) {\n      relationship = await followAccount(currentInstance, accessToken, accountId)\n    } else {\n      relationship = await unfollowAccount(currentInstance, accessToken, accountId)\n    }\n    await updateLocalRelationship(currentInstance, accountId, relationship)\n    if (toastOnSuccess) {\n      /* no await */ toast.say(follow ? \"Followed account\" : \"Unfollowed account\")\n    }\n  } catch (e) {\n    console.error(e)\n    /* no await */ toast.say(follow\n      ? formatIntl([\"Unable to follow account: \",[\"error\"]], { error: (e.message || '') })\n      : formatIntl([\"Unable to unfollow account: \",[\"error\"]], { error: (e.message || '') })\n    )\n  }\n}\n","import { post, WRITE_TIMEOUT } from '../_utils/ajax'\nimport { auth, basename } from './utils'\n\nexport async function followAccount (instanceName, accessToken, accountId) {\n  const url = `${basename(instanceName)}/api/v1/accounts/${accountId}/follow`\n  return post(url, null, auth(accessToken), { timeout: WRITE_TIMEOUT })\n}\n\nexport async function unfollowAccount (instanceName, accessToken, accountId) {\n  const url = `${basename(instanceName)}/api/v1/accounts/${accountId}/unfollow`\n  return post(url, null, auth(accessToken), { timeout: WRITE_TIMEOUT })\n}\n","import { store } from '../_store/store'\nimport { muteAccount, unmuteAccount } from '../_api/mute'\nimport { toast } from '../_components/toast/toast'\nimport { updateLocalRelationship } from './accounts'\nimport { emit } from '../_utils/eventBus'\nimport { formatIntl } from '../_utils/formatIntl'\n\nexport async function setAccountMuted (accountId, mute, notifications, toastOnSuccess) {\n  const { currentInstance, accessToken } = store.get()\n  try {\n    let relationship\n    if (mute) {\n      relationship = await muteAccount(currentInstance, accessToken, accountId, notifications)\n    } else {\n      relationship = await unmuteAccount(currentInstance, accessToken, accountId)\n    }\n    await updateLocalRelationship(currentInstance, accountId, relationship)\n    if (toastOnSuccess) {\n      /* no await */ toast.say(mute ? \"Muted account\" : \"Unmuted account\")\n    }\n    emit('refreshAccountsList')\n  } catch (e) {\n    console.error(e)\n    /* no await */ toast.say(mute\n      ? formatIntl([\"Unable to mute account: \",[\"error\"]], { error: (e.message || '') })\n      : formatIntl([\"Unable to unmute account: \",[\"error\"]], { error: (e.message || '') })\n    )\n  }\n}\n","import { auth, basename } from './utils'\nimport { post, WRITE_TIMEOUT } from '../_utils/ajax'\n\nexport async function muteAccount (instanceName, accessToken, accountId, notifications) {\n  const url = `${basename(instanceName)}/api/v1/accounts/${accountId}/mute`\n  return post(url, { notifications }, auth(accessToken), { timeout: WRITE_TIMEOUT })\n}\n\nexport async function unmuteAccount (instanceName, accessToken, accountId) {\n  const url = `${basename(instanceName)}/api/v1/accounts/${accountId}/unmute`\n  return post(url, null, auth(accessToken), { timeout: WRITE_TIMEOUT })\n}\n","import { importShowReportDialog } from '../_components/dialog/asyncDialogs/importShowReportDialog.js'\n\nexport async function reportStatusOrAccount ({ status, account }) {\n  const showReportDialog = await importShowReportDialog()\n  showReportDialog({ status, account })\n}\n","export const importShowReportDialog = () => import(\n  '../creators/showReportDialog'\n).then(mod => mod.default)\n","import { importShowMuteDialog } from '../_components/dialog/asyncDialogs/importShowMuteDialog.js'\nimport { setAccountMuted } from './mute'\n\nexport async function toggleMute (account, mute) {\n  if (mute) {\n    (await importShowMuteDialog())(account)\n  } else {\n    await setAccountMuted(account.id, mute, /* notifications */ false, /* toastOnSuccess */ true)\n  }\n}\n","export const importShowMuteDialog = () => import(\n  '../creators/showMuteDialog'\n).then(mod => mod.default)\n","import { store } from '../_store/store'\nimport { deleteStatus } from '../_api/delete'\nimport { toast } from '../_components/toast/toast'\nimport { deleteStatus as deleteStatusLocally } from './deleteStatuses'\nimport { formatIntl } from '../_utils/formatIntl'\n\nexport async function doDeleteStatus (statusId) {\n  const { currentInstance, accessToken } = store.get()\n  try {\n    const deletedStatus = await deleteStatus(currentInstance, accessToken, statusId)\n    deleteStatusLocally(currentInstance, statusId)\n    /* no await */ toast.say(\"Toot deleted\")\n    return deletedStatus\n  } catch (e) {\n    console.error(e)\n    /* no await */ toast.say(formatIntl([\"Unable to delete toot: \",[\"error\"]], { error: (e.message || '') }))\n    throw e\n  }\n}\n","import { auth, basename } from './utils'\nimport { del, WRITE_TIMEOUT } from '../_utils/ajax'\n\nexport async function deleteStatus (instanceName, accessToken, statusId) {\n  const url = `${basename(instanceName)}/api/v1/statuses/${statusId}`\n  return del(url, auth(accessToken), { timeout: WRITE_TIMEOUT })\n}\n","import { store } from '../_store/store'\nimport { toast } from '../_components/toast/toast'\nimport { pinStatus, unpinStatus } from '../_api/pin'\nimport { database } from '../_database/database'\nimport { emit } from '../_utils/eventBus'\nimport { formatIntl } from '../_utils/formatIntl'\n\nexport async function setStatusPinnedOrUnpinned (statusId, pinned, toastOnSuccess) {\n  const { currentInstance, accessToken } = store.get()\n  try {\n    if (pinned) {\n      await pinStatus(currentInstance, accessToken, statusId)\n    } else {\n      await unpinStatus(currentInstance, accessToken, statusId)\n    }\n    if (toastOnSuccess) {\n      /* no await */ toast.say(pinned ? \"Pinned toot\" : \"Unpinned toot\")\n    }\n    store.setStatusPinned(currentInstance, statusId, pinned)\n    await database.setStatusPinned(currentInstance, statusId, pinned)\n    emit('updatePinnedStatuses')\n  } catch (e) {\n    console.error(e)\n    /* no await */ toast.say(pinned\n      ? formatIntl([\"Unable to pin toot: \",[\"error\"]], { error: (e.message || '') })\n      : formatIntl([\"Unable to unpin toot: \",[\"error\"]], { error: (e.message || '') })\n    )\n  }\n}\n","import { post, WRITE_TIMEOUT } from '../_utils/ajax'\nimport { auth, basename } from './utils'\n\nexport async function pinStatus (instanceName, accessToken, statusId) {\n  const url = `${basename(instanceName)}/api/v1/statuses/${statusId}/pin`\n  return post(url, null, auth(accessToken), { timeout: WRITE_TIMEOUT })\n}\n\nexport async function unpinStatus (instanceName, accessToken, statusId) {\n  const url = `${basename(instanceName)}/api/v1/statuses/${statusId}/unpin`\n  return post(url, null, auth(accessToken), { timeout: WRITE_TIMEOUT })\n}\n","import { store } from '../_store/store'\nimport { toast } from '../_components/toast/toast'\nimport { bookmarkStatus, unbookmarkStatus } from '../_api/bookmark'\nimport { database } from '../_database/database'\nimport { formatIntl } from '../_utils/formatIntl'\n\nexport async function setStatusBookmarkedOrUnbookmarked (statusId, bookmarked) {\n  const { currentInstance, accessToken } = store.get()\n  try {\n    if (bookmarked) {\n      await bookmarkStatus(currentInstance, accessToken, statusId)\n    } else {\n      await unbookmarkStatus(currentInstance, accessToken, statusId)\n    }\n    if (bookmarked) {\n      /* no await */ toast.say(\"Bookmarked toot\")\n    } else {\n      /* no await */ toast.say(\"Unbookmarked toot\")\n    }\n    store.setStatusBookmarked(currentInstance, statusId, bookmarked)\n    await database.setStatusBookmarked(currentInstance, statusId, bookmarked)\n  } catch (e) {\n    console.error(e)\n    /* no await */toast.say(\n      bookmarked\n        ? formatIntl([\"Unable to bookmark: \",[\"error\"]], { error: (e.message || '') })\n        : formatIntl([\"Unable to unbookmark: \",[\"error\"]], { error: (e.message || '') })\n    )\n  }\n}\n","import { post, WRITE_TIMEOUT } from '../_utils/ajax'\nimport { auth, basename } from './utils'\n\nexport async function bookmarkStatus (instanceName, accessToken, statusId) {\n  const url = `${basename(instanceName)}/api/v1/statuses/${statusId}/bookmark`\n  return post(url, null, auth(accessToken), { timeout: WRITE_TIMEOUT })\n}\n\nexport async function unbookmarkStatus (instanceName, accessToken, statusId) {\n  const url = `${basename(instanceName)}/api/v1/statuses/${statusId}/unbookmark`\n  return post(url, null, auth(accessToken), { timeout: WRITE_TIMEOUT })\n}\n","import { store } from '../_store/store'\nimport { muteConversation, unmuteConversation } from '../_api/muteConversation'\nimport { toast } from '../_components/toast/toast'\nimport { database } from '../_database/database'\nimport { formatIntl } from '../_utils/formatIntl'\n\nexport async function setConversationMuted (statusId, mute, toastOnSuccess) {\n  const { currentInstance, accessToken } = store.get()\n  try {\n    if (mute) {\n      await muteConversation(currentInstance, accessToken, statusId)\n    } else {\n      await unmuteConversation(currentInstance, accessToken, statusId)\n    }\n    await database.setStatusMuted(currentInstance, statusId, mute)\n    if (toastOnSuccess) {\n      /* no await */ toast.say(mute ? \"Muted conversation\" : \"Unmuted conversation\")\n    }\n  } catch (e) {\n    console.error(e)\n    /* no await */ toast.say(mute\n      ? formatIntl([\"Unable to mute conversation: \",[\"error\"]], { error: (e.message || '') })\n      : formatIntl([\"Unable to unmute conversation: \",[\"error\"]], { error: (e.message || '') })\n    )\n  }\n}\n","import { auth, basename } from './utils'\nimport { post, WRITE_TIMEOUT } from '../_utils/ajax'\n\nexport async function muteConversation (instanceName, accessToken, statusId) {\n  const url = `${basename(instanceName)}/api/v1/statuses/${statusId}/mute`\n  return post(url, null, auth(accessToken), { timeout: WRITE_TIMEOUT })\n}\n\nexport async function unmuteConversation (instanceName, accessToken, statusId) {\n  const url = `${basename(instanceName)}/api/v1/statuses/${statusId}/unmute`\n  return post(url, null, auth(accessToken), { timeout: WRITE_TIMEOUT })\n}\n","<ModalDialog\n  {id}\n  {label}\n  {title}\n  shrinkWidthToFit={true}\n  background=\"var(--main-bg)\"\n>\n  <GenericDialogList selectable={false} {items} on:click=\"onClick(event)\"/>\n</ModalDialog>\n<script>\nimport ModalDialog from './ModalDialog.html'\nimport { store } from '../../../_store/store'\nimport GenericDialogList from './GenericDialogList.html'\nimport { setAccountFollowed } from '../../../_actions/follow'\nimport { doDeleteStatus } from '../../../_actions/delete'\nimport { show } from '../helpers/showDialog'\nimport { close } from '../helpers/closeDialog'\nimport { oncreate } from '../helpers/onCreateDialog'\nimport { setAccountBlocked } from '../../../_actions/block'\nimport { setStatusPinnedOrUnpinned } from '../../../_actions/pin'\nimport { setStatusBookmarkedOrUnbookmarked } from '../../../_actions/bookmark'\nimport { setConversationMuted } from '../../../_actions/muteConversation'\nimport { copyText } from '../../../_actions/copyText'\nimport { deleteAndRedraft } from '../../../_actions/deleteAndRedraft'\nimport { shareStatus } from '../../../_actions/share'\nimport { toggleMute } from '../../../_actions/toggleMute'\nimport { reportStatusOrAccount } from '../../../_actions/report'\nimport { formatIntl } from '../../../_utils/formatIntl'\n\nexport default {\n  oncreate,\n  data: () => ({\n    supportsWebShare: process.browser && typeof navigator.share === 'function'\n  }),\n  computed: {\n    relationship: ({ $currentAccountRelationship }) => $currentAccountRelationship,\n    account: ({ $currentAccountProfile }) => $currentAccountProfile,\n    verifyCredentials: ({ $currentVerifyCredentials }) => $currentVerifyCredentials,\n    statusId: ({ status }) => status.id,\n    pinned: ({ statusId, $currentStatusModifications, status }) => {\n      if ($currentStatusModifications && statusId in $currentStatusModifications.pins) {\n        return $currentStatusModifications.pins[statusId]\n      }\n      return status.pinned\n    },\n    //\n    // begin copypasta (StatusOptionsDialog.html / AccountProfileOptionsDialog.html)\n    //\n    verifyCredentialsId: ({ verifyCredentials }) => verifyCredentials.id,\n    following: ({ relationship }) => relationship && relationship.following,\n    followRequested: ({ relationship }) => relationship && relationship.requested,\n    accountId: ({ account }) => account && account.id,\n    username: ({ account }) => account.username,\n    muting: ({ relationship }) => relationship.muting,\n    blocking: ({ relationship }) => relationship.blocking,\n    followLabel: ({ following, followRequested, account, username }) => {\n      if (typeof following === 'undefined' || !account) {\n        return ''\n      }\n      return (following || followRequested)\n        ? formatIntl([\"Unfollow \",[\"account\"]], { account: `@${username}` })\n        : formatIntl([\"Follow \",[\"account\"]], { account: `@${username}` })\n    },\n    followIcon: ({ following, followRequested }) => (\n      following ? '#fa-user-times' : followRequested ? '#fa-hourglass' : '#fa-user-plus'\n    ),\n    blockLabel: ({ blocking, username }) => (\n      blocking\n        ? formatIntl([\"Unblock \",[\"account\"]], { account: `@${username}` })\n        : formatIntl([\"Block \",[\"account\"]], { account: `@${username}` })\n    ),\n    blockIcon: ({ blocking }) => blocking ? '#fa-unlock' : '#fa-ban',\n    muteLabel: ({ muting, username }) => (\n      muting\n        ? formatIntl([\"Unmute \",[\"account\"]], { account: `@${username}` })\n        : formatIntl([\"Mute \",[\"account\"]], { account: `@${username}` })\n    ),\n    muteIcon: ({ muting }) => muting ? '#fa-volume-up' : '#fa-volume-off',\n    isUser: ({ accountId, verifyCredentialsId }) => accountId === verifyCredentialsId,\n    //\n    // end copypasta (StatusOptionsDialog.html / AccountProfileOptionsDialog.html)\n    //\n    pinLabel: ({ pinned, isUser }) => isUser ? (pinned ? \"Unpin from profile\" : \"Pin to profile\") : '',\n    visibility: ({ status }) => status.visibility,\n    mentions: ({ status }) => status.mentions || [],\n    mentionsUser: ({ mentions, verifyCredentialsId }) => !!mentions.find(_ => _.id === verifyCredentialsId),\n    mutingConversation: ({ status }) => !!status.muted,\n    muteConversationLabel: ({ mutingConversation }) => (\n      mutingConversation\n        ? \"Unmute conversation\"\n        : \"Mute conversation\"\n    ),\n    muteConversationIcon: ({ mutingConversation }) => mutingConversation ? '#fa-volume-up' : '#fa-volume-off',\n    isPublicOrUnlisted: ({ visibility }) => visibility === 'public' || visibility === 'unlisted',\n    bookmarkLabel: ({ status }) => status.bookmarked ? \"Unbookmark toot\" : \"Bookmark toot\",\n    items: ({\n      blockLabel, blocking, blockIcon, muteLabel, muteIcon, followLabel, followIcon,\n      following, followRequested, pinLabel, isUser, visibility, mentionsUser, mutingConversation,\n      muteConversationLabel, muteConversationIcon, supportsWebShare, isPublicOrUnlisted, bookmarkLabel\n    }) => ([\n      isUser && {\n        key: 'delete',\n        label: \"Delete\",\n        icon: '#fa-trash'\n      },\n      isPublicOrUnlisted && isUser && {\n        key: 'pin',\n        label: pinLabel,\n        icon: '#fa-thumb-tack'\n      },\n      !isUser && !blocking && {\n        key: 'follow',\n        label: followLabel,\n        icon: followIcon\n      },\n      !isUser && {\n        key: 'block',\n        label: blockLabel,\n        icon: blockIcon\n      },\n      !isUser && !blocking && {\n        key: 'mute',\n        label: muteLabel,\n        icon: muteIcon\n      },\n      (isUser || mentionsUser) && {\n        key: 'muteConversation',\n        label: muteConversationLabel,\n        icon: muteConversationIcon\n      },\n      isUser && {\n        key: 'redraft',\n        label: \"Delete and redraft\",\n        icon: '#fa-pencil'\n      },\n      !isUser && {\n        key: 'report',\n        label: \"Report toot\",\n        icon: '#fa-flag'\n      },\n      {\n        key: 'bookmark',\n        label: bookmarkLabel,\n        icon: '#fa-bookmark'\n      },\n      isPublicOrUnlisted && supportsWebShare && {\n        key: 'share',\n        label: \"Share toot\",\n        icon: '#fa-share-square-o'\n      },\n      isPublicOrUnlisted && {\n        key: 'copy',\n        label: \"Copy link to toot\",\n        icon: '#fa-link'\n      }\n    ].filter(Boolean))\n  },\n  components: {\n    ModalDialog,\n    GenericDialogList\n  },\n  store: () => store,\n  methods: {\n    show,\n    close,\n    onClick (item) {\n      switch (item.key) {\n        case 'delete':\n          return this.onDeleteClicked()\n        case 'pin':\n          return this.onPinClicked()\n        case 'follow':\n          return this.onFollowClicked()\n        case 'block':\n          return this.onBlockClicked()\n        case 'mute':\n          return this.onMuteClicked()\n        case 'copy':\n          return this.onCopyClicked()\n        case 'muteConversation':\n          return this.onMuteConversationClicked()\n        case 'redraft':\n          return this.onRedraft()\n        case 'share':\n          return this.onShare()\n        case 'report':\n          return this.onReport()\n        case 'bookmark':\n          return this.onBookmark()\n      }\n    },\n    async onDeleteClicked () {\n      const { statusId } = this.get()\n      this.close()\n      await doDeleteStatus(statusId)\n    },\n    async onPinClicked () {\n      const { statusId, pinned } = this.get()\n      this.close()\n      await setStatusPinnedOrUnpinned(statusId, !pinned, true)\n    },\n    async onFollowClicked () {\n      const { accountId, following } = this.get()\n      this.close()\n      await setAccountFollowed(accountId, !following, true)\n    },\n    async onBlockClicked () {\n      const { accountId, blocking } = this.get()\n      this.close()\n      await setAccountBlocked(accountId, !blocking, true)\n    },\n    async onMuteClicked () {\n      const { account, muting } = this.get()\n      this.close()\n      await toggleMute(account, !muting)\n    },\n    async onMuteConversationClicked () {\n      const { statusId, mutingConversation } = this.get()\n      this.close()\n      await setConversationMuted(statusId, !mutingConversation, true)\n    },\n    async onCopyClicked () {\n      const { status } = this.get()\n      const { url } = status\n      this.close()\n      await copyText(url)\n    },\n    async onRedraft () {\n      const { status } = this.get()\n      this.close()\n      await deleteAndRedraft(status)\n    },\n    async onShare () {\n      const { status } = this.get()\n      this.close()\n      await shareStatus(status)\n    },\n    async onReport () {\n      const { status, account } = this.get()\n      this.close()\n      await reportStatusOrAccount(({ status, account }))\n    },\n    async onBookmark () {\n      const { status } = this.get()\n      this.close()\n      await setStatusBookmarkedOrUnbookmarked(status.id, !status.bookmarked)\n    }\n  }\n}\n</script>\n","import { statusHtmlToPlainText } from '../_utils/statusHtmlToPlainText'\nimport { importShowComposeDialog } from '../_components/dialog/asyncDialogs/importShowComposeDialog.js'\nimport { doDeleteStatus } from './delete'\nimport { store } from '../_store/store'\n\nexport async function deleteAndRedraft (status) {\n  const deleteStatusPromise = doDeleteStatus(status.id)\n  const dialogPromise = importShowComposeDialog()\n  const deletedStatus = await deleteStatusPromise\n\n  store.setComposeData('dialog', {\n    text: deletedStatus.text || statusHtmlToPlainText(status.content, status.mentions),\n    contentWarningShown: !!status.spoiler_text,\n    contentWarning: status.spoiler_text || '',\n    postPrivacy: status.visibility,\n    media: status.media_attachments && status.media_attachments.map(_ => ({\n      description: _.description || '',\n      data: _\n    })),\n    inReplyToId: status.in_reply_to_id,\n    // note that for polls there is no real way to preserve the original expiry\n    poll: status.poll && {\n      multiple: !!status.poll.multiple,\n      options: (status.poll.options || []).map(option => option.title)\n    },\n    sensitive: !!status.sensitive\n  })\n  const showComposeDialog = await dialogPromise\n  showComposeDialog()\n}\n","import { toast } from '../_components/toast/toast'\nimport { statusHtmlToPlainText } from '../_utils/statusHtmlToPlainText'\nimport { formatIntl } from '../_utils/formatIntl'\n\nexport async function shareStatus (status) {\n  try {\n    await navigator.share({\n      title: status.spoiler_text || undefined,\n      text: statusHtmlToPlainText(status.content, status.mentions),\n      url: status.url\n    })\n  } catch (e) {\n    /* no await */ toast.say(formatIntl([\"Unable to share: \",[\"error\"]], { error: (e.message || '') }))\n  }\n}\n","import StatusOptionsDialog from '../components/StatusOptionsDialog.html'\nimport { showDialog } from './showDialog'\n\nexport default function showStatusOptionsDialog (status) {\n  return showDialog(StatusOptionsDialog, {\n    label: \"Status options\",\n    title: '',\n    status: status\n  })\n}\n","import { mark, stop } from './marks'\nimport { massageStatusPlainText } from './massageStatusPlainText'\n\nconst domParser = process.browser && new DOMParser()\n\n// mentions like \"@foo\" have to be expanded to \"@foo@example.com\"\nfunction massageMentions (doc, mentions) {\n  const anchors = doc.querySelectorAll('a.mention')\n  for (let i = 0; i < anchors.length; i++) {\n    const anchor = anchors[i]\n    const href = anchor.getAttribute('href')\n    const mention = mentions.find(mention => mention.url === href)\n    if (mention) {\n      anchor.innerText = `@${mention.acct}`\n    }\n  }\n}\n\n// paragraphs should be separated by double newlines\n// single <br/>s should become single newlines\nfunction innerTextRetainingNewlines (doc) {\n  let res = ''\n  const paragraphs = doc.querySelectorAll('p')\n  for (let i = 0; i < paragraphs.length; i++) {\n    const paragraph = paragraphs[i]\n    const brs = paragraph.querySelectorAll('br')\n    for (let j = 0; j < brs.length; j++) {\n      const br = brs[j]\n      br.parentNode.replaceChild(doc.createTextNode('\\n'), br)\n    }\n    res += (i > 0 ? '\\n\\n' : '') + paragraph.textContent\n  }\n  return res\n}\n\nexport function statusHtmlToPlainText (html, mentions) {\n  if (!html) {\n    return ''\n  }\n  mark('statusHtmlToPlainText')\n  html = massageStatusPlainText(html)\n  const doc = domParser.parseFromString(html, 'text/html')\n  massageMentions(doc, mentions)\n  const res = innerTextRetainingNewlines(doc)\n  stop('statusHtmlToPlainText')\n  return res\n}\n"],"sourceRoot":""}