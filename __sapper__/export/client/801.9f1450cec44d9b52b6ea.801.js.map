{"version":3,"sources":["webpack://pinafore/./src/routes/_components/settings/instance/ThemeSettings.html","webpack://pinafore/./src/routes/_actions/instances.js","webpack://pinafore/./src/routes/_utils/asyncModules/importVirtualListStore.js","webpack://pinafore/./src/routes/_api/instance.js","webpack://pinafore/./src/routes/_api/user.js","webpack://pinafore/./src/routes/_utils/asyncModules/importDatabase.js","webpack://pinafore/./src/routes/_database/asyncDatabase.js","webpack://pinafore/./src/routes/_static/themes.js","webpack://pinafore/./src/routes/_utils/sync.js"],"names":["theme","label","default","name","selectedTheme","instanceName","this","get","instanceThemes","store","set","onThemeChange","createThemeLabel","themeGroup","dark","color","themes","DEFAULT_THEME","themeGroups","filter","_","changeTheme","newTheme","currentInstance","enableGrayscale","switchToInstance","searchResults","queryInSearch","async","logOutOfInstance","message","formatIntl","instance","composeData","customEmoji","instanceInfos","instanceLists","loggedInInstances","loggedInInstancesInOrder","verifyCredentials","splice","indexOf","newInstance","objectsToClear","obj","timelineInitialized","timelinePreinitialized","virtualListStore","clearRealmByPrefix","toast","database","updateVerifyCredentialsForInstance","accessToken","access_token","catch","error","startsWith","logOutOnUnauthorized","thisVerifyCredentials","setStoreVerifyCredentials","updateInstanceInfo","info","getInstanceInfo","url","timeout","getVerifyCredentials","getAccount","accountId","asyncDatabase","Proxy","prop","args","apply","cacheFirstUpdateAfter","networkFetcher","dbFetcher","dbUpdater","stateSetter","networkPromise","dbResponse","err","console","fetchAndUpdatePromise","then","networkResponse","cacheFirstUpdateOnlyIfNotInCache"],"mappings":"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","file":"801.9f1450cec44d9b52b6ea.801.js","sourcesContent":["<form class=\"generic-instance-settings\" aria-label=\"Choose a theme\">\n  <div class=\"theme-groups\">\n    {#each themeGroups as themeGroup}\n    <div class=\"theme-group\">\n      <h3>\n        {themeGroup.dark ? \"Dark background\" : \"Light background\" }\n      </h3>\n      {#each themeGroup.themes as theme}\n      <div class=\"theme-picker\">\n        <input type=\"radio\" id=\"choice-theme-{theme.name}\"\n               value={theme.name} checked=\"$currentTheme === theme.name\"\n               bind:group=\"selectedTheme\" on:change=\"onThemeChange()\">\n        <label class=\"theme-picker-label\" for=\"choice-theme-{theme.name}\">\n          <div class=\"theme-preview theme-preview-{themeGroup.dark ? 'dark' : 'light'}\"\n               style=\"background-color: {theme.color};\" >\n          </div>\n          <span class=\"theme-picker-label-span\">\n            {createThemeLabel(theme)}\n          </span>\n        </label>\n      </div>\n      {/each}\n    </div>\n    {/each}\n  </div>\n</form>\n<GenericInstanceSettingsStyle/>\n<style>\n  .theme-groups {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n  }\n  .theme-group {\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n    flex: 1;\n  }\n  .theme-picker {\n    display: flex;\n    align-items: center;\n  }\n  .theme-picker-label {\n    display: flex;\n    align-items: center;\n  }\n  .theme-picker-label-span {\n    margin: 2px 10px 0;\n  }\n  .theme-preview {\n    width: 21px;\n    height: 21px;\n    box-sizing: border-box;\n    border-radius: 2px;\n    margin: 0 2px 0 10px;\n  }\n  .theme-preview-dark {\n    border: 2px solid #000;\n  }\n  .theme-preview-light {\n    border: 2px solid #dadada;\n  }\n\n  h3 {\n    font-size: 1.4em;\n  }\n\n  @media (max-width: 479px) {\n    .theme-groups {\n      grid-template-columns: 1fr;\n    }\n\n    h3 {\n      margin-top: 0.5em;\n    }\n  }\n\n  @media (max-width: 240px) {\n    .theme-groups {\n      grid-row-gap: 25px; /* TODO: \"Dark background\" text overlaps with previous div on KaiOS for some reason */\n    }\n  }\n</style>\n<script>\n  import GenericInstanceSettingsStyle from './GenericInstanceSettingsStyle.html'\n  import { changeTheme } from '../../../_actions/instances'\n  import { store } from '../../../_store/store'\n  import { themes } from '../../../_static/themes'\n  import { DEFAULT_THEME } from '../../../_utils/themeEngine'\n  import { formatIntl } from '../../../_utils/formatIntl'\n\n  export default {\n    async oncreate () {\n      const { instanceName } = this.get()\n      const { instanceThemes } = this.store.get()\n      this.set({\n        selectedTheme: instanceThemes[instanceName] || DEFAULT_THEME\n      })\n    },\n    store: () => store,\n    data: () => ({\n      themes,\n      DEFAULT_THEME,\n      selectedTheme: DEFAULT_THEME\n    }),\n    computed: {\n      themeGroups: ({ themes }) => ([\n        {\n          dark: false,\n          themes: themes.filter(_ => !_.dark)\n        },\n        {\n          dark: true,\n          themes: themes.filter(_ => _.dark)\n        }\n      ])\n    },\n    helpers: {\n      createThemeLabel (theme) {\n        return formatIntl([[\"label\"],\" \",[\"default\",\"select\",{\"true\":[\"(default)\"],\"other\":[]}]], {\n          label: theme.label,\n          default: theme.name === DEFAULT_THEME\n        })\n      }\n    },\n    methods: {\n      onThemeChange () {\n        const { selectedTheme, instanceName } = this.get()\n        changeTheme(instanceName, selectedTheme)\n      }\n    },\n    components: {\n      GenericInstanceSettingsStyle\n    }\n  }\n</script>\n","import { getVerifyCredentials } from '../_api/user'\nimport { store } from '../_store/store'\nimport { switchToTheme } from '../_utils/themeEngine'\nimport { toast } from '../_components/toast/toast'\nimport { goto } from '../../../__sapper__/client'\nimport { cacheFirstUpdateAfter } from '../_utils/sync'\nimport { getInstanceInfo } from '../_api/instance'\nimport { database } from '../_database/database'\nimport { importVirtualListStore } from '../_utils/asyncModules/importVirtualListStore.js'\nimport { formatIntl } from '../_utils/formatIntl'\n\nexport function changeTheme (instanceName, newTheme) {\n  const { instanceThemes } = store.get()\n  instanceThemes[instanceName] = newTheme\n  store.set({ instanceThemes: instanceThemes })\n  store.save()\n  const { currentInstance } = store.get()\n  if (instanceName === currentInstance) {\n    const { enableGrayscale } = store.get()\n    switchToTheme(newTheme, enableGrayscale)\n  }\n}\n\nexport function switchToInstance (instanceName) {\n  const { instanceThemes } = store.get()\n  store.set({\n    currentInstance: instanceName,\n    searchResults: null,\n    queryInSearch: ''\n  })\n  store.save()\n  const { enableGrayscale } = store.get()\n  switchToTheme(instanceThemes[instanceName], enableGrayscale)\n}\n\nexport async function logOutOfInstance (instanceName, message) {\n  message = message || formatIntl([\"Logged out of \",[\"instance\"]], { instance: instanceName })\n  const {\n    composeData,\n    currentInstance,\n    customEmoji,\n    instanceInfos,\n    instanceLists,\n    instanceThemes,\n    loggedInInstances,\n    loggedInInstancesInOrder,\n    verifyCredentials\n  } = store.get()\n  loggedInInstancesInOrder.splice(loggedInInstancesInOrder.indexOf(instanceName), 1)\n  const newInstance = instanceName === currentInstance ? loggedInInstancesInOrder[0] : currentInstance\n  const objectsToClear = [\n    composeData,\n    customEmoji,\n    instanceInfos,\n    instanceLists,\n    instanceThemes,\n    loggedInInstances,\n    verifyCredentials\n  ]\n  for (const obj of objectsToClear) {\n    delete obj[instanceName]\n  }\n  store.set({\n    composeData,\n    currentInstance: newInstance,\n    customEmoji,\n    instanceInfos,\n    instanceLists,\n    instanceThemes,\n    loggedInInstances,\n    loggedInInstancesInOrder,\n    queryInSearch: '',\n    searchResults: null,\n    timelineInitialized: false,\n    timelinePreinitialized: false,\n    verifyCredentials\n  })\n  store.clearTimelineDataForInstance(instanceName)\n  store.clearAutosuggestDataForInstance(instanceName)\n  store.save()\n  const { virtualListStore } = await importVirtualListStore()\n  virtualListStore.clearRealmByPrefix(currentInstance + '/') // TODO: this is a hacky way to clear the vlist cache\n  toast.say(message)\n  const { enableGrayscale } = store.get()\n  switchToTheme(instanceThemes[newInstance], enableGrayscale)\n  /* no await */ database.clearDatabaseForInstance(instanceName)\n  goto('/settings/instances')\n}\n\nfunction setStoreVerifyCredentials (instanceName, thisVerifyCredentials) {\n  const { verifyCredentials } = store.get()\n  verifyCredentials[instanceName] = thisVerifyCredentials\n  store.set({ verifyCredentials: verifyCredentials })\n}\n\nexport async function updateVerifyCredentialsForInstance (instanceName) {\n  const { loggedInInstances } = store.get()\n  const accessToken = loggedInInstances[instanceName].access_token\n  await cacheFirstUpdateAfter(\n    () => getVerifyCredentials(instanceName, accessToken).catch(logOutOnUnauthorized(instanceName)),\n    () => database.getInstanceVerifyCredentials(instanceName),\n    verifyCredentials => database.setInstanceVerifyCredentials(instanceName, verifyCredentials),\n    verifyCredentials => setStoreVerifyCredentials(instanceName, verifyCredentials)\n  )\n}\n\nexport async function updateVerifyCredentialsForCurrentInstance () {\n  const { currentInstance } = store.get()\n  await updateVerifyCredentialsForInstance(currentInstance)\n}\n\nexport async function updateInstanceInfo (instanceName) {\n  await cacheFirstUpdateAfter(\n    () => getInstanceInfo(instanceName),\n    () => database.getInstanceInfo(instanceName),\n    info => database.setInstanceInfo(instanceName, info),\n    info => {\n      const { instanceInfos } = store.get()\n      instanceInfos[instanceName] = info\n      store.set({ instanceInfos: instanceInfos })\n    }\n  )\n}\n\nexport function logOutOnUnauthorized (instanceName) {\n  return async error => {\n    if (error.message.startsWith('401:')) {\n      await logOutOfInstance(instanceName, formatIntl([\"The access token was revoked, logged out of \",[\"instance\"]], { instance: instanceName }))\n    }\n\n    throw error\n  }\n}\n","export const importVirtualListStore = () => import(\n  '../../_components/virtualList/virtualListStore.js'\n)\n","import { get, DEFAULT_TIMEOUT } from '../_utils/ajax'\nimport { basename } from './utils'\n\nexport function getInstanceInfo (instanceName) {\n  const url = `${basename(instanceName)}/api/v1/instance`\n  return get(url, null, { timeout: DEFAULT_TIMEOUT })\n}\n","import { get, DEFAULT_TIMEOUT } from '../_utils/ajax'\nimport { auth, basename } from './utils'\n\nexport function getVerifyCredentials (instanceName, accessToken) {\n  const url = `${basename(instanceName)}/api/v1/accounts/verify_credentials`\n  return get(url, auth(accessToken), { timeout: DEFAULT_TIMEOUT })\n}\n\nexport function getAccount (instanceName, accessToken, accountId) {\n  const url = `${basename(instanceName)}/api/v1/accounts/${accountId}`\n  return get(url, auth(accessToken), { timeout: DEFAULT_TIMEOUT })\n}\n","export const importDatabase = () => import(\n  '../../_database/databaseApis.js'\n)\n","// All database functions are asynchronous, so we can just proxy here and\n// put an async import of the database, to avoid including it in the main bundle\n// (which doesn't need to run when the user isn't logged in).\n\nimport { importDatabase } from '../_utils/asyncModules/importDatabase.js'\n\nconst handler = {\n  get: function (obj, prop) {\n    return async function (...args) {\n      if (!obj[prop]) {\n        const database = await importDatabase()\n        obj[prop] = database[prop]\n      }\n      return obj[prop].apply(null, args)\n    }\n  }\n}\n\nexport const asyncDatabase = new Proxy({}, handler)\n","const themes = [\n  {\n    name: 'default',\n    label: \"Royal\",\n    dark: false,\n    color: 'royalblue'\n  },\n  {\n    name: 'scarlet',\n    label: \"Scarlet\",\n    dark: false,\n    color: '#e04e41'\n  },\n  {\n    name: 'seafoam',\n    label: \"Seafoam\",\n    dark: false,\n    color: '#177380'\n  },\n  {\n    name: 'hotpants',\n    label: \"Hotpants\",\n    dark: false,\n    color: 'hotpink'\n  },\n  {\n    name: 'oaken',\n    label: \"Oaken\",\n    dark: false,\n    color: 'saddlebrown'\n  },\n  {\n    name: 'majesty',\n    label: \"Majesty\",\n    dark: false,\n    color: 'blueviolet'\n  },\n  {\n    name: 'gecko',\n    label: \"Gecko\",\n    dark: false,\n    color: '#4ab92f'\n  },\n  {\n    name: 'grayscale',\n    label: \"Grayscale\",\n    dark: false,\n    color: '#999999'\n  },\n  {\n    name: 'ozark',\n    label: \"Ozark\",\n    dark: true,\n    color: '#5263af'\n  },\n  {\n    name: 'cobalt',\n    label: \"Cobalt\",\n    dark: true,\n    color: '#08439b'\n  },\n  {\n    name: 'sorcery',\n    label: \"Sorcery\",\n    dark: true,\n    color: '#ae91e8'\n  },\n  {\n    name: 'punk',\n    label: \"Punk\",\n    dark: true,\n    color: '#e04e41'\n  },\n  {\n    name: 'riot',\n    label: \"Riot\",\n    dark: true,\n    color: 'hotpink'\n  },\n  {\n    name: 'hacker',\n    label: \"Hacker\",\n    dark: true,\n    color: '#4ab92f'\n  },\n  {\n    name: 'mastodon',\n    label: \"Mastodon\",\n    dark: true,\n    color: '#282C37'\n  },\n  {\n    name: 'pitchblack',\n    label: \"Pitch Black\",\n    dark: true,\n    color: '#000'\n  },\n  {\n    name: 'dark-grayscale',\n    label: \"Dark Grayscale\",\n    dark: true,\n    color: '#666'\n  }\n]\n\nexport { themes }\n","// Hit both the cache and the network, setting state for the cached version first,\n// then the network version (as it's assumed to be fresher). Also update the db afterwards.\nexport async function cacheFirstUpdateAfter (networkFetcher, dbFetcher, dbUpdater, stateSetter) {\n  const networkPromise = networkFetcher() // kick off network request immediately\n  let dbResponse\n  try {\n    dbResponse = await dbFetcher()\n  } catch (err) {\n    console.error('ignored DB error', err)\n  } finally {\n    if (dbResponse) {\n      stateSetter(dbResponse)\n    }\n    const fetchAndUpdatePromise = networkPromise.then(networkResponse => {\n      /* no await */ dbUpdater(networkResponse)\n      stateSetter(networkResponse)\n    })\n    if (!dbResponse) { // no cached result available, await the network\n      await fetchAndUpdatePromise\n    }\n  }\n}\n\n// Try the cache first. If we get a hit, set the state and do nothing. If we don't get a cache hit,\n// then go to the network, update the cache, and set the state.\nexport async function cacheFirstUpdateOnlyIfNotInCache (networkFetcher, dbFetcher, dbUpdater, stateSetter) {\n  let dbResponse\n  try {\n    dbResponse = await dbFetcher()\n  } catch (err) {\n    console.error('ignored DB error', err)\n  }\n  if (dbResponse) {\n    stateSetter(dbResponse)\n  } else {\n    const networkResponse = await networkFetcher()\n    /* no await */ dbUpdater(networkResponse)\n    stateSetter(networkResponse)\n  }\n}\n"],"sourceRoot":""}